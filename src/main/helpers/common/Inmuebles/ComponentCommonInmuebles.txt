package main.helpers.common.Inmuebles;

import java.io.File;
import java.io.IOException;
import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Hashtable;
import java.util.List;
import java.util.Set;
import java.util.StringTokenizer;

import org.openqa.selenium.By;
import org.openqa.selenium.ElementNotInteractableException;
import org.openqa.selenium.InvalidElementStateException;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.StaleElementReferenceException;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.UnexpectedAlertBehaviour;
import org.openqa.selenium.UnhandledAlertException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.firefox.FirefoxProfile;
import org.openqa.selenium.firefox.GeckoDriverService;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.io.FileHandler;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.Select;
import org.openqa.selenium.support.ui.UnexpectedTagNameException;
import org.openqa.selenium.support.ui.WebDriverWait;

import main.helpers.common.*;

import main.helpers.dataUtility.*;

/**
 * Clase Componentes Comunes Inmuebles: Superclase que contiene atributos y métodos comunes para realizar un generador o test.
 * ---------------------------------------------------------------------------------------------------------------------------
 * Adecuación para parametrizar el usuario.
 * ---------------------------------------------------------------------------------------------------------------------------
 * Adecuaciones para considerar a inmuebles de acciones y derechos, tomando en cuenta el método comun seleccionAccion().
 * ----------------------------------------------------------------------------------------------------------------------------
 * Se agregó como atributo el dato ambiente, para poder ser seteado desde otras clases.
 * ----------------------------------------------------------------------------------------------------------------------------
 * Se eliminó el objeto DesiredCapabilities, éste es absorbido por el objeto FirefoxOptions en la versión 3.141.59 de Selenium
 * Webdriver.
 *  ----------------------------------------------------------------------------------------------------------------------------
 * Se modificó el método configurarFirefox ( ), para que configure dinámicamente el proxy y el directorio de reportes en el
 * navegador.
 * Se modificó el método cargarParametros ( ), para que sea generico y sea utilizado por todos los Pages Objects, se uso Java
 * Reflection.
 * Se creó la función esAtributo() para validar si un atributo corresponde a una determinada clase; usada por cargarParametros()
 * Se creó el método común detalleDeudas ( ), que selecciona un intervalo de gestiones.
 * Se creó el método esperarDescargaReporte ( ) que espera a la ventana del reporte para luego cerrarla.
 */
public class ComponentCommonInmuebles
{
	/**
	 * Atributos:
	 * perfil            : Objeto de Firefox que almacena nuestras configuraciones.
	 * driver            : Objeto Driver que interactúa con el navegador.
	 * robot             : Objeto Robot para la manipulación de ventanas de Windows.
	 * wait              : Objeto de Espera Explícita hasta que se cumpla una condición con un tiempo máximo.
	 * datosExcel        : Objeto que realiza el procesamiento de datos de archivos Excel.
	 * nombreArchivoDatos: Nombre del archivo Excel que alimenta de datos al generador o test.
	 * municipio         : Atributo común para un clase generadora o clase test.
	 */
	protected FirefoxProfile       perfil;
	protected FirefoxOptions       opcionesNavegador;
	protected WebDriver            driver;               
	protected WebDriverWait        wait;   
	protected Actions              acciones;
	protected String               municipio;
	protected String               numeroInmueble;
	protected int                  numeroAccion;   
	protected String               usuario;
	protected ExcelAcces           datosExcel;
	protected StringBuilder        mensajeError;
	protected String               fechaHoraInicio;
	protected long                 tiempoInicioTotal;
	protected long                 tiempoInicioTest;
	protected boolean              accionesYDerechos;
	protected String               accionInicio;				//ATINM-97 (AP-057/2018)
	protected String               accionFin;					//ATINM-97 (AP-057/2018)
	protected ArrayList < String > nombresArchivoReportes;
	protected boolean              usarDatosAmbienteTest;
	protected String               flujo;						//AP-059/2018 (ATINM-17)
	protected String               operacion;
	protected String               ambiente;                   
	
	public ComponentCommonInmuebles()
	{			
		this.mensajeError               = new StringBuilder(" ERROR: ");
		this.tiempoInicioTotal          = 0;
		this.tiempoInicioTest           = 0;
		this.accionesYDerechos          = false;
		this.nombresArchivoReportes     = new ArrayList<String>();
		this.usarDatosAmbienteTest      = false;		
		System.setProperty(FirefoxDriver.SystemProperty.BROWSER_LOGFILE, Constants.DIRECTORIO_LOGS.concat(Constants.ARCHIVO_LOG_GECKODRIVER));		
	}	
	
	public void inicializarDriver()
	{
		ComponentCommon.registrarEnLog("************************************************************");
		ComponentCommon.registrarEnLog("                       ".concat(this.getClass().getSimpleName().toUpperCase()));
		ComponentCommon.registrarEnLog("************************************************************");
		this.fechaHoraInicio   = new SimpleDateFormat(Constants.MASCARA_FECHA_HORA).format(Calendar.getInstance().getTime());
		this.tiempoInicioTotal = System.currentTimeMillis();
		this.tiempoInicioTest  = System.currentTimeMillis();
		ComponentCommon.registrarEnLog("Ambiente: ".concat(getAmbiente()));
		System.setProperty(GeckoDriverService.GECKO_DRIVER_EXE_PROPERTY, Constants.GECKO_DRIVER);		
	}
	
	/**
	 * Método configurarFirefox()
	 * Modificado: efigueredo	Fecha: 27/02/2019
	 * Se eliminaron las referencias del objeto DesiredCapabilities, al ya no ser necesarias desde la versión 3.141.59 de 
	 * Selenium Webdriver.
	 * -------------------------------------------------------------------------------------------------------------------------
	 *  Modificado: efigueredo	Fecha: 01/08/2019
	 *  Se modificó para que configure dinámicamente el proxy y el directorio de reportes en el navegador.
	 */
	protected void configurarFirefox()
	{
		inicializarDriver();		
		this.perfil            = new FirefoxProfile();  //01/08/2019 Inicio: configuración Proxy y directorio de descargas.
		this.perfil.setPreference("network.proxy.type", 1);
		this.perfil.setPreference("network.proxy.socks", "172.21.24.40");
		this.perfil.setPreference("network.proxy.socks_port", 3128);
		this.perfil.setPreference("network.proxy.no_proxies_on", "*.ruat.gob.bo, 127.0.0.1, *.ruat.net.bo, *.ruat.net");
		
		this.perfil.setPreference("browser.download.folderList", 2);
		this.perfil.setPreference("browser.download.manager.showWhenStarting",false);
		this.perfil.setPreference("browser.download.dir",Constants.DIRECTORIO_REPORTES);
		this.perfil.setPreference("browser.helperApps.neverAsk.saveToDisk", "application/octet-stream,application/pdf,application/x-pdf,application/vnd.pdf");
		this.perfil.setPreference("browser.helperApps.neverAsk.openFile", "application/octet-stream,application/pdf,application/x-pdf,application/vnd.pdf");
		this.perfil.setPreference("browser.download.manager.useWindow", false);
		this.perfil.setPreference("plugin.scan.plid.all",false);
		this.perfil.setPreference("plugin.scan.Acrobat","99.0");
		this.perfil.setPreference("pdfjs.enabledCache.state",false); 
		this.perfil.setPreference("pdfjs.disabled",true);  //01/08/2019 Fin.
		
		this.opcionesNavegador = new FirefoxOptions();
		this.opcionesNavegador.setProfile(this.perfil);
		this.opcionesNavegador.setCapability(CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR, UnexpectedAlertBehaviour.IGNORE);
		this.opcionesNavegador.setCapability(CapabilityType.TAKES_SCREENSHOT, true);
		
		this.driver            = new FirefoxDriver(this.opcionesNavegador);			
		this.wait              = new WebDriverWait(this.driver, Constants.TIME_OUT);		
		this.acciones          = new Actions(this.driver);		
	}
	
	public void configurarFirefox(FirefoxProfile perfilFirefox, FirefoxOptions opcionesFirefox, WebDriver controlador, WebDriverWait espera, Actions acciones)
	{
		inicializarDriver();	
		this.perfil            = perfilFirefox;
		this.opcionesNavegador = opcionesFirefox;
		this.driver            = controlador;
		this.wait              = espera;
		this.acciones          = acciones;
	}
	
	public FirefoxProfile getPerfil()
	{
		return this.perfil;
	}
	
	public FirefoxOptions getOpcionesNavegador()
	{
		return this.opcionesNavegador;
	}
	
	public WebDriver getDriver()
	{
		return this.driver;
	}
	
	public WebDriverWait getWait()
	{
		return this.wait;
	}
	
	public Actions getAcciones()
	{
		return this.acciones;
	}
	
	/**
	 * Se realizaron ajustes para que sea genérico y pueda ser utilizado por todos los generadores. Se utilizó Java Reflection 
	 * para inicializar los atributos de los page Objects con los datos establecidos en el archivo de datos.
	 * @param fila_i
	 */
	@SuppressWarnings ( "unchecked" )
	public void cargarParametros ( int fila_i )
	{
		Field                atributoClase      = null;
		Object               objetoDatosExcel   = null;
		Object               camposExcel        = null;
		Method               metodoGetClaves    = null;	
		Method               metodoGetParametro = null;
		String               nombreAtributo     = "";
		ArrayList < String > listaParametros    = null;
		
		try 
		{
			Field atributoDatosExcel = this.getClass ( ).getSuperclass ( ).getDeclaredField ( "datosExcel" );
			
			try 
			{				
				objetoDatosExcel = ( Object ) atributoDatosExcel.get ( this );
				
				try 
				{
					metodoGetClaves = objetoDatosExcel.getClass ( ).getMethod ( "getClaves" );					
					
					try 
					{
						camposExcel = metodoGetClaves.invoke ( objetoDatosExcel );
						
						for ( String campoExcel_i: ( ArrayList < String > ) camposExcel )
						{
							atributoClase = null;
							
							if( !campoExcel_i.equals( "VOLVER " ) && !campoExcel_i.equals( "USUARIO" ) )
							{		
								nombreAtributo = CommonComponent.eliminarAcentos ( campoExcel_i.toLowerCase ( ) );
								nombreAtributo = CommonComponent.formatearNombreAtributo ( nombreAtributo );
								
								if( esAtributo ( this.getClass ( ).getSuperclass ( ), nombreAtributo ) )
								{
									atributoClase = this.getClass ( ).getSuperclass ( ).getDeclaredField ( nombreAtributo );
								}
								else if( esAtributo ( this.getClass ( ), nombreAtributo ) )
								{
									atributoClase = this.getClass().getDeclaredField (nombreAtributo);
								}
																
								metodoGetParametro = objetoDatosExcel.getClass ( ).getMethod ( "getParametro", String.class );
								listaParametros    = ( ArrayList < String > ) metodoGetParametro.invoke ( objetoDatosExcel, campoExcel_i );										
								atributoClase.setAccessible(true);

								if ( atributoClase.getType ( ).toString ( ).equals( "int" ) )
								{
									atributoClase.set ( this,  Integer.parseInt( listaParametros.get ( fila_i ) ) );
								}
								else
								{
									atributoClase.set ( this,  listaParametros.get ( fila_i ) );
								}								
							}
						}						
						
					} 
					catch (InvocationTargetException invocacionExcepcion) 
					{
						invocacionExcepcion.printStackTrace ( );
					}
				} 
				catch (NoSuchMethodException noEncuentraMetodoExcepcion) 
				{
					noEncuentraMetodoExcepcion.printStackTrace ( );
				}
			} 
			catch (IllegalArgumentException | IllegalAccessException operacionIlegalExcepcion) 
			{
				operacionIlegalExcepcion.printStackTrace ( );
			}
		} 
		catch (NoSuchFieldException | SecurityException noEncuentraCampoExcepcion) 
		{
			noEncuentraCampoExcepcion.printStackTrace ( );
		}
	}
	
	/**
	 * Valida si un atributo corresponde a una determinada clase. Utilizado por el método cargarParametros ( ).
	 * @param clase
	 * @param string
	 */
	public boolean esAtributo ( Class < ? > clase, String string )
	{
		Field atributos [] = clase.getDeclaredFields ( );
		
		for (Field atributo_i : atributos)
		{
			if (atributo_i.getName ( ).equals ( string ) )
			{
				return true;
			}
		}
		
		return false;		
	}
	
	public void setUsuario(String usuario)
	{
		this.usuario = usuario;
	}
	
	public String getUsuario()
	{
		return this.usuario;
	}
	
	public void setMunicipio(String municipio)
	{
		this.municipio = municipio;
	}
	
	public String getMunicipio()
	{
		return this.municipio;
	}
	
	/**
	 * @return numeroInmueble
	 */
	public String getNumeroInmueble() 
	{
		return numeroInmueble;
	}

	/**
	 * @param numeroInmueble
	 */
	public void setNumeroInmueble(String numeroInmueble) 
	{
		this.numeroInmueble = numeroInmueble;
	}	
	
	/**
	 * @return numeroAccion
	 */
	public int getNumeroAccion ( )
	{
		return this.numeroAccion;
	}
	
	/**
	 * @param numeroAccion
	 */
	public void setNumeroAccion ( int numeroAccion )
	{
		this.numeroAccion = numeroAccion;
	}
	
	/**
	 * @return accionInicio
	 */
	public String getAccionInicio() 
	{
		return accionInicio;
	}

	/**
	 * @param accionInicio to set
	 */
	public void setAccionInicio(String accionInicio) 
	{
		this.accionInicio = accionInicio;
	}

	/**
	 * @return accionFin
	 */
	public String getAccionFin() 
	{
		return accionFin;
	}

	/**
	 * @param accionFin to set
	 */
	public void setAccionFin(String accionFin) 
	{
		this.accionFin = accionFin;
	}

	public ArrayList<String> getNombresArchivoReportes() 
	{
		return nombresArchivoReportes;
	}

	public void setNombresArchivoReportes(ArrayList<String> nombresArchivoReportes) 
	{
		this.nombresArchivoReportes = nombresArchivoReportes;
	}
	
	public void setUsarDatosAmbienteTest(boolean usarDatosAmbienteTest)
	{
		this.usarDatosAmbienteTest = usarDatosAmbienteTest;
	}
	
	/**
	 * @return flujo
	 */
	public String getFlujo()
	{
		return this.flujo;
	}
	
	/**
	 * @param flujo to set
	 */
	public void setFlujo(String flujo)
	{
		this.flujo = flujo;
	}
	
	public DataTest getDatosExcel()
	{
		return this.datosExcel;
	}
	
	public void setDatosExcel(DataTest datosExcel)
	{
		this.datosExcel = datosExcel;
	}
	
	/**
	 * @return operacion
	 */
	public String getOperacion() 
	{
		return operacion;
	}

	/**
	 * @param operacion to set
	 */
	public void setOperacion(String operacion) 
	{
		this.operacion = operacion;
	}

	public void iniciarAplicacion(String url, String municipio, String usuario)
	{
		configurarFirefox();
		abrirAplicativo(url);
		autentificar(getAbreviacionAlcaldia(municipio), usuario, String.valueOf(usuario.charAt(0)).concat(Constants.CONTRASENIA_DEFECTO));
	}
	
	protected void abrirAplicativo(String url)
	{
		Set <String> ventanas = null;
		
		this.driver.get(url);                      // Abre el navegador y redirige a una URL.
		this.wait.until(ExpectedConditions.numberOfWindowsToBe(2));
		ComponentCommon.registrarEnLog("Tiempo Inicialización (navegador): ".concat(getTiempoTranscurrido(this.tiempoInicioTotal)));
		ventanas = this.driver.getWindowHandles();
		this.driver.switchTo().window(ventanas.toArray()[0].toString()).close();
		this.driver.switchTo().window(ventanas.toArray()[1].toString());
		ComponentCommon.registrarEnLog("Abriendo aplicativo...");
		this.driver.manage().window().setPosition(new org.openqa.selenium.Point(1500, 0));
		this.driver.manage().window().maximize();
	}
	
	/**
	 * Método autentificar ( ): Realiza la autentificación dado un usuario, contraseña y abreviación del municipio.	 
	 * @param abreviacionMunicipio
	 * @param usuario
	 * @param contrasenia
	 * -----------------------------------------------------------------------------------------------------------------------
	 * Descripcion: Se factorizó código, se reeemplazó sleeps por condiciones de espera y se agregó tratamiento de excepciones.
	 * -----------------------------------------------------------------------------------------------------------------------
	 */
	protected void autentificar ( String abreviacionMunicipio, String usuario, String contrasenia )
	{		
		//1. ui
		//CLASS LoginUI
		final  By userInput = By.id("login");
		final  By passwordInput = By.id("password");
		final  By loginButton = By.id("btn-ingresar");
		
		//2. action
		//class Enter class click
		
		//public static void on(WebDriver webDriver, By locator){
		 	//webDriver.findElement(locator).click() 
	     //}
		//public static void Enter(WebDriver webDriver, By locator, String text){
	 	//webDriver.findElement(locator).sendKeys(text); 
        //}
		
		//3. Tareas
		// public static void as(WebDriver driver, String user, String passWord{
		// 	 Enter.text(driver, LoginUI.userInput, user);
	    //}
		
		
		
		
		final String ID_CAMPO_USUARIO                  = "login";
		final String ID_CAMPO_CONTRASENIA              = "password";
		final String ID_BOTON_INGRESAR                 = "btn-ingresar";
		final String ID_VENTANA_MODAL                  = "modal_window";
		final String ID_MENSAJE_MODAL                  = "mensaje-modal";
		final String PATH_BOTON_VENTANA_MODAL          = "//*[@id='modal_window']/div[2]/div[2]/button";
		final String ID_CAMPO_BUSQUEDA_MODULO          = "txt-buscar-modulo";
		final String ID_CAMPO_CONTRASENIA_ACTUAL       = "password-actual";
		final String ID_CAMPO_CONTRASENIA_NUEVA        = "password-nuevo";
		final String ID_CAMPO_CONTRASENIA_CONFIRMACION = "password-confirmacion";
		final String ID_BOTON_GRABAR                   = "btn-grabar";
		
		String mensajeAlerta = "";
		String codigoError   = "";
		
		this.wait.until ( ExpectedConditions.or( ExpectedConditions.visibilityOfElementLocated ( By.id ( ID_VENTANA_MODAL ) ), 
                                                 ExpectedConditions.visibilityOfElementLocated ( By.id ( ID_CAMPO_USUARIO ) ) ) );	
		
		if ( this.driver.findElement ( By.id ( ID_MENSAJE_MODAL ) ).isDisplayed ( ) )
		{
			mensajeAlerta = this.driver.findElement ( By.id ( ID_MENSAJE_MODAL ) ).getText ( );
						
			if ( mensajeAlerta.contains ( "versión del Aplicativo no es válida" ) )
			{
				ComponentCommon.registrarEnLog ( " ".concat ( mensajeAlerta ) );
				this.driver.findElement ( By.xpath ( PATH_BOTON_VENTANA_MODAL ) ).click ( );
				this.wait.until ( ExpectedConditions.invisibilityOfElementLocated ( By.id ( ID_MENSAJE_MODAL ) ) );
			}
			else if ( mensajeAlerta.contains ( "Código de Error" ) )
			{
				codigoError = mensajeAlerta.substring ( mensajeAlerta.indexOf ( ": " ) + 1 );
				throw new AssertionError ( procesarErrorAplicativo ( codigoError ) );
			}
		}      
		
		try
		{
			this.wait.until ( ExpectedConditions.and ( ExpectedConditions.elementToBeClickable ( By.id ( ID_CAMPO_USUARIO ) ),  
                                                       ExpectedConditions.elementToBeClickable ( By.id ( ID_CAMPO_CONTRASENIA ) ) ) );
		}
		catch ( TimeoutException tiempoExcedidoAutentificacion )
		{
			this.mensajeError.append ( "El aplicativo demoró mas de 1 minuto en el proceso de autentificación." );
			throw new AssertionError ( this.mensajeError.toString ( ) );
		}
		
		if ( usuario.contains ( "." ) )
		{
			usuario = usuario.substring ( 0, usuario.indexOf ( "." ) );
		}

		this.driver.findElement ( By.id ( ID_CAMPO_USUARIO ) ).clear ( );
		this.driver.findElement ( By.id ( ID_CAMPO_USUARIO ) ).sendKeys ( usuario.concat ( "." ).concat ( abreviacionMunicipio ) );
		this.driver.findElement ( By.id ( ID_CAMPO_CONTRASENIA ) ).sendKeys ( contrasenia );		
		this.wait.until ( ExpectedConditions.elementToBeClickable ( By.id ( ID_BOTON_INGRESAR ) ) ).click ( );
		ComponentCommon.registrarEnLog ( "Proceso de autentificación: ..." );	
		
		this.wait.until ( ExpectedConditions.or ( ExpectedConditions.visibilityOfElementLocated ( By.xpath ( PATH_BOTON_VENTANA_MODAL ) ),
			                                      ExpectedConditions.visibilityOfElementLocated ( By.id ( ID_CAMPO_BUSQUEDA_MODULO ) ) ) );
			
		try
		{
			if ( this.driver.findElement ( By.id ( ID_MENSAJE_MODAL ) ).isDisplayed ( ) )
			{
				mensajeAlerta = this.driver.findElement ( By.id ( ID_MENSAJE_MODAL ) ).getText ( );			
				this.driver.findElement ( By.xpath ( PATH_BOTON_VENTANA_MODAL ) ).click ( );	
				this.wait.until ( ExpectedConditions.invisibilityOfElementLocated ( By.id ( ID_MENSAJE_MODAL ) ) );
					
				if ( mensajeAlerta.contains ( "Ha expirado el plazo para el cambio de su contraseña" ) )
				{				
					this.wait.until ( ExpectedConditions.elementToBeClickable ( By.id ( ID_CAMPO_CONTRASENIA_ACTUAL ) ) ) ;
					
					this.driver.findElement ( By.id ( ID_CAMPO_CONTRASENIA_ACTUAL ) ).sendKeys ( contrasenia );
					
					if ( contrasenia.contains( "8" ) )
					{
						contrasenia = contrasenia.substring ( 0, contrasenia.length ( ) - 1 );
					}
					else
					{
						contrasenia = contrasenia.concat ( "8" );
					}
					
					this.driver.findElement ( By.id ( ID_CAMPO_CONTRASENIA_NUEVA ) ).sendKeys ( contrasenia );
					this.driver.findElement ( By.id ( ID_CAMPO_CONTRASENIA_CONFIRMACION ) ).sendKeys ( contrasenia );					
					this.driver.findElement ( By.id ( ID_BOTON_GRABAR ) ).click ( );
					
					this.wait.until ( ExpectedConditions.visibilityOfElementLocated ( By.xpath ( PATH_BOTON_VENTANA_MODAL ) ) );
					mensajeAlerta = this.driver.findElement(  By.id ( ID_MENSAJE_MODAL ) ).getText ( );				
					this.driver.findElement (  By.xpath ( PATH_BOTON_VENTANA_MODAL ) ).click ( );
					this.wait.until ( ExpectedConditions.invisibilityOfElementLocated ( By.id ( ID_MENSAJE_MODAL ) ) );
					
					if ( mensajeAlerta.contains ( "cambio de contraseña se realizó correctamente" ) )
					{
						ComponentCommon.registrarEnLog ( " ".concat ( mensajeAlerta ) );
					}
					else
					{
						this.mensajeError.append ( mensajeAlerta );
						throw new AssertionError ( this.mensajeError.toString ( ) );
					}
				}
				else if ( mensajeAlerta.contains ( "no se encuentra registrado para el uso de esta aplicación" ) ||
						  mensajeAlerta.contains ( "Usuario y/o Contraseña es inexistente" ) )
				{
					this.mensajeError.append ( mensajeAlerta );
					throw new AssertionError ( this.mensajeError.toString ( ) );
				}
				else if ( mensajeAlerta.contains ( "Error al intentar autentificarse" ) )
				{
					if ( !contrasenia.contains ( "12345678" ) )
					{	
						ComponentCommon.registrarEnLog ( " Se intentará la autentificación nuevamente con la contraseña alternativa..." );
						autentificar ( abreviacionMunicipio, usuario, contrasenia.concat ( "8" ) );			
					}
					else
					{
						throw new AssertionError ( " Dato Usuario o contraseña incorrecto." );  // Se genera una excepción si no funcionan ninguna de los 2 intentos.
					}
				}
			}
			else
			{
				ComponentCommon.registrarEnLog ( "Proceso de autentificación: OK." );
			}
		}
		catch ( TimeoutException tiempoEsperaExcedido )
		{
			this.mensajeError.append ( "Tiempo de espera excedido." );
			throw new AssertionError ( this.mensajeError.toString ( ) );
		}
	}	
	
	public void cerrarAplicativo() 
	{	
		final String ID_FRAME_CONTENIDO_PRINCIPAL = "contenido-principal";
		final String ID_CAMPO_CONTRASENIA_ACTUAL  = "password-actual";
		final String PATH_MENU_MI_CUENTA          = "//*[@id='opciones-fijas-cabecera']/ul/li[1]/a";
		final String PATH_MENU_CERRAR_SESION      = "//*[@id='opciones-fijas-cabecera']/ul/li[1]/ul/li[4]/a";
		final String PATH_BOTON_SI_CERRAR_SESION  = "/html/body/div[4]/div[2]/div[2]/button[1]";
		
		this.wait.until ( ExpectedConditions.or (
				            ExpectedConditions.visibilityOfElementLocated ( By.id ( ID_FRAME_CONTENIDO_PRINCIPAL ) ),
				            ExpectedConditions.visibilityOfElementLocated ( By.id ( ID_CAMPO_CONTRASENIA_ACTUAL ) ) ) );
		
		if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_FRAME_CONTENIDO_PRINCIPAL ) )
		{
			this.driver.switchTo ( ).defaultContent ( );			
			ComponentCommon.registrarEnLog ( "Cerrar sesión desde el menú principal: ..." );
			this.wait.until ( ExpectedConditions.elementToBeClickable ( By.xpath ( PATH_MENU_MI_CUENTA ) ) ).click();			
			this.wait.until ( ExpectedConditions.elementToBeClickable ( By.xpath(PATH_MENU_CERRAR_SESION ) ) ).click ( );
			this.wait.until ( ExpectedConditions.visibilityOfElementLocated ( By.xpath ( PATH_BOTON_SI_CERRAR_SESION ) ) ).click ( );
			ComponentCommon.registrarEnLog ( "Cerrar sesión desde el menú principal: OK." );
		}
		else if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_CONTRASENIA_ACTUAL ) )
		{
			this.mensajeError.append ( "Fallo al cambiar contraseña." );
			throw new AssertionError ( this.mensajeError.toString ( ) );
		}
		
	}
	
	public void terminarAutomatizacion(long tiempoInicioTotal)
	{
		ComponentCommon.registrarEnLog("Tiempo Ejecución (TOTAL): ".concat(getTiempoTranscurrido(tiempoInicioTotal)));
		ComponentCommon.registrarEnLog(Constants.CADENA_FIN_EJECUCION_TOTAL);
		ComponentCommon.liberarRecursos();
	}
	
	public boolean cuadroDialogoEstaPresente()
	{
		try
		{
			this.driver.switchTo().alert();
			return true;
		}
		catch(NoSuchElementException noEncuentraAlertaExcepcion)
		{
			return false;
		}
		catch(NoAlertPresentException alertNoPresenteExcepcion)
		{
			return false;
		}
	}
	
	public void iniciarModulo ( String subsistema, String menu, String modulo )
	{
		final String PATH_OPCIONES_SUBSISTEMA = "//*[@id='menu-lista']/ul/li";		
		final String ID_IFRAME_PRINCIPAL      = "ifrm-contenido";
		final String ID_VENTANA_MODAL         = "modal_window";
		final String ID_MENSAJE_MODAL         = "mensaje-modal";
		
		String              rutaModulo                = "";
		String              pathOpcionesMenu          = "";
		String              pathOpcionesModulo        = "";
		String              pathOpcionesModuloDetalle = "";
		String              prefijoModulo             = "";
		boolean             subsistemaEncontrado      = false;
		boolean             opcionMenuEncontrado      = false;
		boolean             opcionModuloEncontrado    = false;
		List < WebElement > opcionesSubsistema        = null;
		List < WebElement > opcionesMenu              = null;
		List < WebElement > opcionesModulo            = null;
		List < WebElement > opcionesModuloDetalle     = null;
		
		this.wait.until ( ExpectedConditions.or ( 
				            ExpectedConditions.presenceOfAllElementsLocatedBy ( By.xpath ( PATH_OPCIONES_SUBSISTEMA ) ),
                            ExpectedConditions.visibilityOfElementLocated ( By.id ( ID_VENTANA_MODAL ) ) ) );
		
		if ( !this.driver.findElement ( By.id ( ID_VENTANA_MODAL ) ).isDisplayed ( ) )
		{
			opcionesSubsistema = this.driver.findElements ( By.xpath ( PATH_OPCIONES_SUBSISTEMA ) );
			pathOpcionesMenu   = PATH_OPCIONES_SUBSISTEMA.concat ( "[" );
			
			if ( modulo.contains( menu ) )
			{
				rutaModulo = ComponentCommon.obtenerCadenaTipoTitulo ( modulo );
			}
			else 
			{
				rutaModulo = menu.concat ( " " ).concat ( ComponentCommon.obtenerCadenaTipoTitulo ( modulo ) );
			}
			
			ComponentCommon.registrarEnLog ( "Iniciando módulo ".concat ( rutaModulo ).concat ( ": ..." ) );		
			
			for ( int subsistema_i = 0; subsistema_i < opcionesSubsistema.size ( ); subsistema_i ++ )
			{
				if ( opcionesSubsistema.get ( subsistema_i ).getText ( ).equals ( subsistema ) )
				{
					opcionesSubsistema.get ( subsistema_i ).click ( );	
					subsistemaEncontrado = true;					
					pathOpcionesMenu     = pathOpcionesMenu.concat ( String.valueOf ( subsistema_i + 1 ) ).concat ( "]/ul/li" );				
					opcionesMenu         = this.wait.until ( ExpectedConditions.presenceOfAllElementsLocatedBy ( 
							                                   By.xpath ( pathOpcionesMenu ) ) );
					
					for ( int opcion_j = 0; opcion_j < opcionesMenu.size ( ); opcion_j ++ )
					{
						if ( opcionesMenu.get ( opcion_j ).getText ( ).equals ( menu ) )
						{
							opcionesMenu.get ( opcion_j ).click ( );
							opcionMenuEncontrado = true;							
							pathOpcionesModulo   = pathOpcionesMenu.concat ( "[" ).concat ( String.valueOf ( opcion_j + 1 ) )
									                               .concat ( "]/ul/li" );
							
							this.wait.until ( 
									    ExpectedConditions.or ( 
									      ExpectedConditions.presenceOfAllElementsLocatedBy ( By.xpath ( pathOpcionesModulo ) ),
									      ExpectedConditions.attributeContains ( 
									    		               opcionesMenu.get ( opcion_j ).findElement ( By.tagName ( "a" ) ), 
									    		                                                           "class", "enlace" ) ) );
							
							( ( JavascriptExecutor ) this.driver ).executeScript ( 
									                                 "arguments [ 0 ].scrollIntoView ( true );",
									                                 opcionesMenu.get ( opcion_j ) );
							
							opcionesModulo = this.driver.findElements ( By.xpath ( pathOpcionesModulo ) );	
							
							if ( opcionesModulo.size ( ) > 0 )
							{
								if ( modulo.contains ( " - " ) )
								{
									prefijoModulo = modulo.substring ( 0, modulo.indexOf ( " -" ) );
									modulo        = modulo.substring ( modulo.indexOf ( "- " ) + 2 );
								}
								
								for ( int modulo_k = 0; modulo_k < opcionesModulo.size ( ); modulo_k ++ )
								{					
									if ( opcionesModulo.get ( modulo_k ).getText ( ).equalsIgnoreCase ( prefijoModulo ) )
									{
										opcionesModulo.get ( modulo_k ).click ( );					
										pathOpcionesModuloDetalle = pathOpcionesModulo.concat ( "[" )
												                                      .concat ( String.valueOf ( modulo_k + 1 ) )
												                                      .concat( "]/ul/li" );	
										
										opcionesModuloDetalle = this.wait.until ( 
												                            ExpectedConditions.presenceOfAllElementsLocatedBy ( 
												                            		             By.xpath ( pathOpcionesModuloDetalle ) ) );
										
										for ( WebElement moduloDetalle_l: opcionesModuloDetalle )
										{
											if ( moduloDetalle_l.getText ( ).equalsIgnoreCase ( modulo ) )
											{												
												moduloDetalle_l.findElement ( By.tagName ( "a" ) ).click ( );
												opcionModuloEncontrado = true;
												break;
											}
										}
										
										if ( opcionModuloEncontrado )
										{
											break;
										}
									}								
									else
									{
										if ( opcionesModulo.get ( modulo_k ).getText ( ).equalsIgnoreCase ( modulo ) )
										{
											opcionesModulo.get ( modulo_k ).findElement ( By.tagName ( "a" ) ).click ( );
											opcionModuloEncontrado = true;
											break;
										}
									}
								}
							}
							else
							{
								opcionesMenu.get ( opcion_j ).findElement ( By.tagName ( "a" ) ).click ( );
								opcionModuloEncontrado = true;
							}
							break;
						}
					}
					break;
				}
			}
			
			if ( !subsistemaEncontrado )
			{
				this.mensajeError.append ( "Subsistema " ).append ( subsistema ).append ( " no encontrado." );
				throw new AssertionError ( this.mensajeError.toString ( ) );
			}
			else if ( !opcionMenuEncontrado )
			{
				this.mensajeError.append ( "Opción " ).append ( menu ).append ( " no encontrado." );
				throw new AssertionError ( this.mensajeError.toString ( ) );
			}
			else if ( !opcionModuloEncontrado )
			{
				this.mensajeError.append ( "Módulo " ).append ( modulo ).append ( " no encontrado." );
				throw new AssertionError ( this.mensajeError.toString ( ) );
			}

			this.wait.until ( ExpectedConditions.frameToBeAvailableAndSwitchToIt ( 
					                               this.driver.findElement ( By.id ( ID_IFRAME_PRINCIPAL ) ) ) );
			ComponentCommon.registrarEnLog ( "Iniciando módulo ".concat ( rutaModulo ).concat ( ": OK." ) );
		}
		else
		{
			this.mensajeError.append ( this.driver.findElement ( By.id ( ID_MENSAJE_MODAL ) ).getText ( ) )
			                 .append ( " Se perdió la sesión." );
			throw new AssertionError ( this.mensajeError.toString ( ) );
		}
	}
	
	public boolean esperarVista ( String tituloVista )
	{
		this.wait.until ( ExpectedConditions.or ( ExpectedConditions.textToBe ( By.xpath ( Constants.PATH_TITULO_VISTA ), tituloVista ),
				                                  ExpectedConditions.textToBe ( By.xpath ( Constants.PATH_TITULO_VISTA.replaceAll ( "/form", "" ) ), tituloVista ),
				                                  ExpectedConditions.visibilityOfElementLocated ( By.xpath( Constants.PATH_TITULO_VISTA ) ),
				                                  ExpectedConditions.visibilityOfElementLocated ( By.xpath ( Constants.PATH_VALIDACIONES ) ),
				                                  ExpectedConditions.visibilityOfElementLocated ( By.xpath( Constants.PATH_VISTA_DATOS_COD_CATASTRAL ) ),
				                                  ExpectedConditions.visibilityOfElementLocated ( By.cssSelector ( Constants.SELECTOR_CSS_CODIGO_ERROR ) ),
				                                  ExpectedConditions.textToBe ( By.xpath ( "/html/body/h1" ), "Page Flow Error - Unresolvable Forward" ) ) );
		
		if ( getTituloVista ( ).equalsIgnoreCase( tituloVista ) )
		{
			return true;
		}
		else
		{
			if ( this.driver.findElements ( By.xpath ( Constants.PATH_VALIDACIONES ) ).size ( ) > 0 &&	
				 getTituloVista ( ).equalsIgnoreCase( "VALIDACIONES" ) )
			{
				this.mensajeError.append ( this.driver.findElement ( By.xpath ( Constants.PATH_VALIDACIONES ) ).getText ( ) );
				throw new AssertionError ( this.mensajeError.toString ( ) );
			}
			
			if ( this.driver.findElements ( By.xpath ( "/html/body/h1" ) ).size() > 0 && 
				 this.driver.findElement ( By.xpath ( "/html/body/h1" ) ).getText().equalsIgnoreCase( "Page Flow Error - Unresolvable Forward" ))
			{
				this.mensajeError.append ( this.driver.findElement ( By.xpath ( "/html/body/h1" ) ).getText() );
				throw new AssertionError ( this.mensajeError.toString ( ) );
			}
			
			if ( this.driver.findElements ( By.cssSelector ( Constants.SELECTOR_CSS_CODIGO_ERROR ) ).size ( ) > 0)
			{
				throw new AssertionError ( procesarErrorAplicativo ( ) );
			}			
			
			return false;
		}				
	}
	
	public void busquedaInmueble ( String numeroInmueble )
	{	
		final String ID_CAMPO_IDENTIFICADOR   = "txtIdentificador";
		final String ID_RADIO_NUMERO_INMUEBLE = "rbtCriterioNIM"; 
		
		String mensajeAlerta = "";
		
		this.wait.until ( ExpectedConditions.visibilityOfElementLocated ( By.id ( ID_CAMPO_IDENTIFICADOR ) ) ).sendKeys ( numeroInmueble );
		ComponentCommon.registrarEnLog ( "Búsqueda Inmueble: ..." );
		ComponentCommon.registrarEnLog ( " Número Inmueble: ".concat ( numeroInmueble ).concat ( " ( " ).concat ( this.municipio ).concat ( " )" ) );
		this.driver.findElement ( By.id ( ID_RADIO_NUMERO_INMUEBLE ) ).click ( );
		capturarPantalla ( );
		this.driver.findElement ( By.id ( Constants.ID_NAME_BOTON_ACEPTAR ) ).click ( );			
		
		try
		{
			this.wait.until ( ExpectedConditions.or ( ExpectedConditions.alertIsPresent ( ),
                                                      ExpectedConditions.visibilityOfElementLocated ( By.xpath ( Constants.PATH_TITULO_VISTA ) ),
          		                                      ExpectedConditions.visibilityOfElementLocated ( By.xpath ( Constants.PATH_TITULO_VISTA.replaceAll ( "/form", "" ) ) ) ) );		
		}
		catch ( UnhandledAlertException alertExcepcion ) { }
		
		if( cuadroDialogoEstaPresente ( ) ) 
		{
			mensajeAlerta = this.driver.switchTo ( ).alert ( ).getText ( );
			
			if( mensajeAlerta.equalsIgnoreCase ( "No se recuperaron inmuebles para el criterio de búsqueda." )     ||
			    mensajeAlerta.equalsIgnoreCase ( "No existen trámites asociados al inmueble seleccionado." )       ||
			    mensajeAlerta.equalsIgnoreCase ( "No se pueden fusionar las clases de los inmuebles ingresados." ) ||
			    mensajeAlerta.equalsIgnoreCase ( "El inmueble no tiene deuda en cero pendiente para procesar." ) )
			{
				this.driver.switchTo ( ).alert ( ).accept ( );
				this.mensajeError.append ( mensajeAlerta );
				throw new AssertionError ( this.mensajeError.toString ( ) );
			}
		}
	
		if( !cuadroDialogoEstaPresente ( ) && getTituloVista ( ) .contains ( "BUSQUEDA INMUEBLE" ) )
		{
			if ( esAccionesDerechos ( ) )
			{
				this.accionesYDerechos = true;
				
				seleccionarPropiedad( this.numeroAccion );
			}
			else //Para casos con registros históricos: Baja, Fraccionado, Fusionado, Cambio de Propiedad.
			{
				try
				{
					seleccionarPropiedad ( 1 ); 
				}
				catch ( AssertionError noExistePropiedadActiva )
				{
					this.mensajeError.delete ( 8, this.mensajeError.length ( ) );
					this.driver.findElement ( By.linkText ( "Seleccionar" ) ).click ( );
				}
			}
		}
		ComponentCommon.registrarEnLog ( "Búsqueda Inmueble: OK." );
	}
	
	public boolean esAccionesDerechos ( )
	{
		final String PATH_BASE_PROPIEDADES = "/html/body/div[2]/form/table/tbody/tr[3]/td/table/tbody/tr";
		
		int                 nroColumnas        = 0;
		int                 propiedad_i        = 1;
		int                 pagina_i           = 0;
		int                 nroFilasResultados = 0;
		String              estado             = "";
		String              propietario        = "";
		boolean             esAccionesDerechos = false;
		boolean             existePaginacion   = false;
		List < WebElement > filasPropiedades   = null;
		List < WebElement > paginacion         = null;
		
		nroFilasResultados = this.driver.findElements ( By.xpath ( PATH_BASE_PROPIEDADES ) ).size ( );
		
		if ( nroFilasResultados > 1 ) //Existe paginación
		{
			existePaginacion   = true;
			paginacion         = this.driver.findElements ( By.xpath( PATH_BASE_PROPIEDADES.concat ( String.valueOf ( nroFilasResultados ) ).concat ( "]/td/a" ) ) );
			nroFilasResultados = nroFilasResultados - 1;
		}
		
		filasPropiedades = this.driver.findElements ( By.xpath ( PATH_BASE_PROPIEDADES.concat ( "[" ).concat ( String.valueOf ( nroFilasResultados ) ).concat ( "]/td/table/tbody/tr" ) ) );
		
		do
		{
			nroColumnas = filasPropiedades.get ( propiedad_i ).findElements ( By.xpath ( "td" ) ).size ( );
			estado      = filasPropiedades.get ( propiedad_i ).findElement ( By.xpath ( "td[".concat ( String.valueOf ( nroColumnas - 1 ) ).concat ( "]" ) ) ).getText ( );
			propietario = filasPropiedades.get ( propiedad_i ).findElement ( By.xpath ( "td[".concat ( String.valueOf ( nroColumnas - 3 ) ).concat ( "]" ) ) ).getText ( );
			
			if ( estado.equalsIgnoreCase ( "ACTIVO" ) || estado.equalsIgnoreCase ( "EN TRANSFERENCIA" ) )
			{
				if ( propietario.contains( "%" ) )
				{
					esAccionesDerechos = true;
					break;
				}
			}
			propiedad_i ++;
			
			if ( existePaginacion )
			{
				if ( pagina_i < paginacion.size ( ) )
				{
					paginacion.get( pagina_i ++).click ( );
				}
				else
				{
					break;
				}
				propiedad_i = 1;
			}
			else
			{
				if ( propiedad_i >= filasPropiedades.size ( ) )
				{
					break;
				}
			}
			
		} while ( true );
		
		return esAccionesDerechos;
	}
	
	public void seleccionarPropiedad ( int numeroPropiedad )
	{
		final String PATH_BASE_PROPIEDADES = "/html/body/div[2]/form/table/tbody/tr[3]/td/table/tbody/tr";
		
		int                 propiedad_i         = 1;
		int                 pagina_i            = 0;
		int                 nroPropiedadActiva  = 0;
		int                 nroColumnas         = 0;
		int                 nroFilasResultados  = 0;
		String              estado              = "";
		String              propietario         = "";
		boolean             existePaginacion    = false;
		boolean             propiedadEncontrada = false;
		List < WebElement > filasPropiedades    = null;
		List < WebElement > paginacion          = null;
		
		nroFilasResultados = this.driver.findElements ( By.xpath ( PATH_BASE_PROPIEDADES ) ).size ( );
		
		if ( nroFilasResultados > 1 ) //Existe paginación
		{
			existePaginacion   = true;
			paginacion         = this.driver.findElements ( By.xpath( PATH_BASE_PROPIEDADES.concat ( String.valueOf ( nroFilasResultados ) ).concat ( "]/td/a" ) ) );
			nroFilasResultados = nroFilasResultados - 1;
		}
		
		filasPropiedades = this.driver.findElements ( By.xpath ( PATH_BASE_PROPIEDADES.concat ( "[" ).concat ( String.valueOf ( nroFilasResultados ) ).concat ( "]/td/table/tbody/tr" ) ) );
		
		do
		{
			nroColumnas = filasPropiedades.get ( propiedad_i ).findElements ( By.xpath ( "td" ) ).size ( );
			estado      = filasPropiedades.get ( propiedad_i ).findElement ( By.xpath ( "td[".concat ( String.valueOf ( nroColumnas - 1 ) ).concat ( "]" ) ) ).getText ( );
			propietario = filasPropiedades.get ( propiedad_i ).findElement ( By.xpath ( "td[".concat ( String.valueOf ( nroColumnas - 3 ) ).concat ( "]" ) ) ).getText ( );
			
			if ( estado.equalsIgnoreCase ( "ACTIVO" ) || estado.equalsIgnoreCase ( "EN TRANSFERENCIA" ) )
			{
				nroPropiedadActiva ++;
				
				if ( nroPropiedadActiva == numeroPropiedad )
				{
					propiedadEncontrada = true;
					capturarPantalla ( );
					ComponentCommon.registrarEnLog ( " Evaluando Propiedad -> ".concat ( String.valueOf ( numeroPropiedad ) ).concat ( ": " ).concat ( propietario.replaceAll ( "\n", " " ) ) );					
					filasPropiedades.get ( propiedad_i ).findElement ( By.xpath ( "td[".concat ( String.valueOf ( nroColumnas ) ).concat ( "]" ) ) ).findElement ( By.linkText ( "Seleccionar" ) ).click ( );
					
					try
					{
						this.wait.until ( ExpectedConditions.or ( ExpectedConditions.alertIsPresent ( ),
			                                                      ExpectedConditions.visibilityOfElementLocated ( By.xpath ( Constants.PATH_TITULO_VISTA ) ),
			          		                                      ExpectedConditions.visibilityOfElementLocated ( By.xpath ( Constants.PATH_TITULO_VISTA.replaceAll ( "/form", "" ) ) ) ) );		
					}
					catch ( UnhandledAlertException alertaExcepcion ) { }
					
					break;
				}
			}
			propiedad_i ++;
			
			if ( existePaginacion )
			{
				if ( pagina_i < paginacion.size ( ) )
				{
					paginacion.get( pagina_i ++).click ( );
				}
				else
				{
					break;
				}
				propiedad_i = 1;
			}
			else
			{
				if ( propiedad_i >= filasPropiedades.size ( ) )
				{
					break;
				}
			}
			
		} while ( true );
		
		if ( !propiedadEncontrada )
		{
			capturarPantalla ( );
			this.mensajeError.append ( "La propiedad: " ).append ( numeroPropiedad ).append( " no se encuentra en estado válido." );
			throw new AssertionError ( this.mensajeError.toString ( ) );
		}
	}
	
	/**
	 * Ajustes para considerar cuando el número de trámite tiene impresion pendiente.
	 * ----------------------------------------------------------------------------------------------------------------------
	 * Se factorizó código y se modificó para considerar el dato condición gestor trámite
	 */
	public void inicioTramite ( )
	{ 
		final String ID_CAMPO_NUMERO_TRAMITE           = "txtNumTramiteGM";
		final String PATH_ID_TABLAS                    = "/html/body/div[2]/form/table/tbody/tr";
		final String NOMBRE_CHECK_DOCUMENTO            = "{actionForm.chkelegido}";
		final String NOMBRE_RADIO_GESTOR_TRAMITE       = "{actionForm.rdoTramitador}";
		final String ID_BOTON_GRABAR                   = "btnSubmit";
		final String ID_COMBO_CONDICION_GESTOR_TRAMITE = "cbxCondicionGT";
		
		int                 nroTabla                      = 1;
		int                 nroCondicionesGestorTramite   = 0;
		String              pathFilas                     = "";
		String              pathGestorTramite             = "";
		String              mensajeAlerta                 = "";
		Select              comboCondicionGestorTramite   = null;
		boolean             bloqueDocRequeridosEncontrado = false;
		WebElement          bloque                        = null;
		WebElement          documento                     = null;
		WebElement          cuadroVerificacion            = null;		
		List < WebElement > filasBloques                  = null;
		List < WebElement > filasDocumentos               = null;
				
		while ( cuadroDialogoEstaPresente ( ) ) 
		{						
			try
			{	
				this.driver.switchTo ( ).alert ( ).accept ( );
				this.wait.until ( ExpectedConditions.or ( 
						          	ExpectedConditions.alertIsPresent ( ),
                                    ExpectedConditions.visibilityOfElementLocated ( By.xpath ( Constants.PATH_TITULO_VISTA ) ) ) );
			}
			catch ( WebDriverException alertExcepcion ) { }
		}
		
		esperarVista( "INICIO TRAMITE" );		
		ComponentCommon.registrarEnLog( "Inicio Trámite: ..." );	
		
		//NÚMERO TRÁMITE
		if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_NUMERO_TRAMITE ) ) 
		{
			this.driver.findElement ( By.id ( ID_CAMPO_NUMERO_TRAMITE ) ).sendKeys ( ComponentCommon.generarNroTramite ( ) );
		}
		 
		//DOCUMENTOS REQUERIDOS
		filasBloques = this.driver.findElements ( By.xpath ( PATH_ID_TABLAS ) );		//Inicio 08/10/2019
		
		for ( int bloque_i = 1; bloque_i < filasBloques.size ( ); bloque_i ++ )
		{
			nroTabla ++;
			bloque = filasBloques.get ( bloque_i );
			
			if ( bloque.findElements ( By.xpath ( "td/h3" ) ).size ( ) > 0 && 
				 bloque.findElement ( By.xpath ( "td/h3" ) ).getText ( ).equalsIgnoreCase ( "Documentos Requeridos" ) )
			{
				bloqueDocRequeridosEncontrado = true;
				break;
			}
		}
		
		if ( bloqueDocRequeridosEncontrado )
		{
			pathFilas       = PATH_ID_TABLAS.concat ( "[" ).concat ( String.valueOf ( nroTabla ) )
					                        .concat ( "]/td/table/tbody/tr" );
			filasDocumentos = this.driver.findElements ( By.xpath ( pathFilas ) );	
			
			for ( int documento_i = 1; documento_i < filasDocumentos.size ( ); documento_i ++)
			{
				documento = filasDocumentos.get ( documento_i ).findElement ( By.xpath ( "td[1]" ) );		
				
				if ( documento.getText ( ).startsWith ( "*" ) )
				{
					if ( documento.findElements ( By.tagName ( "a" ) ).size ( ) > 0 )
					{
						documento.findElement ( By.tagName ( "a" ) ).click ( );
						registroDetalleDocumento ( );
						esperarVista( "INICIO TRAMITE" );
						filasDocumentos = this.driver.findElements ( By.xpath ( pathFilas ) );
					}
					else
					{
						cuadroVerificacion = filasDocumentos.get( documento_i ).findElement ( By.xpath ( "td[2]" ) );	
						cuadroVerificacion.findElement ( By.name ( NOMBRE_CHECK_DOCUMENTO ) ).click ( );
					}
				}
				else
				{
					break;
				}
			}
		}
		else
		{
			nroTabla = 1;
		}
		
		//DATOS GESTOR TRÁMITE
		pathGestorTramite = PATH_ID_TABLAS.concat ( "[" ).concat ( String.valueOf ( nroTabla + 1 ) ).concat ( "]/td/h3" );

		if ( this.driver.findElement ( By.xpath ( pathGestorTramite ) ).getText ( ).startsWith ( "*" ) )
		{
			if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_NAME, NOMBRE_RADIO_GESTOR_TRAMITE ) )
			{
				this.driver.findElement ( By.name ( NOMBRE_RADIO_GESTOR_TRAMITE ) ).click ( );				
			}
			
			this.driver.findElement ( By.linkText ( "Registrar" ) ).click ( );
			registrarDatosGestorTramite ( );
			esperarVista ( "INICIO TRAMITE" );
		}
		
		//CONDICIÓN GESTOR TRÁMITE
		if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_COMBO_CONDICION_GESTOR_TRAMITE ) )
		{
			comboCondicionGestorTramite = new Select ( this.driver.findElement ( By.id (ID_COMBO_CONDICION_GESTOR_TRAMITE ) ) );				
			nroCondicionesGestorTramite = comboCondicionGestorTramite.getOptions ( ).size ( ) - 1;
			do
			{
				comboCondicionGestorTramite.selectByIndex ( ComponentCommon.getNroAleatorio ( 1, nroCondicionesGestorTramite ) );
				
			}while ( comboCondicionGestorTramite.getFirstSelectedOption ( ).getText ( ).isEmpty ( ) );
		}		//Fin 08/10/2019		
		
		capturarPantalla ( );
		moverScrollYAceptar ( ID_BOTON_GRABAR, Constants.TIPO_LOCALIZADOR_ID );	//14/09/2018
		
		this.wait.until ( ExpectedConditions.alertIsPresent ( ) );
		mensajeAlerta = this.driver.switchTo ( ).alert ( ).getText ( );
		this.driver.switchTo ( ).alert ( ).accept ( );	
		
		if ( mensajeAlerta.contains ( "ya tiene asociado un trámite del Gobierno Municipal" ) ||	//05/09/2018
			 mensajeAlerta.contains ( "es obligatorio" ) ) 		//08/10/2019
		{
			this.mensajeError.append ( mensajeAlerta );		//05/09/2018
			throw new AssertionError ( this.mensajeError.toString ( ) );		                                                //05/09/2018
		}	
			
		ComponentCommon.registrarEnLog ( "Inicio Trámite: OK." );
	}
	
	private void registroDetalleDocumento()
	{
		final String ID_CAMPO_AUTORIDAD_RESPONSABLE = "txtAutoridadResponsable";
		final String ID_CAMPO_FECHA_DOCUMENTO       = "txtFechaDocumento";
		final String ID_CAMPO_SERIE                 = "txtSerie";
		final String ID_CAMPO_NUMERO_FOJAS          = "txtNumerofojas";
		final String ID_BOTON_ACEPTAR               = "btnSubmit";
		
		this.wait.until(ExpectedConditions.presenceOfElementLocated(By.id(ID_CAMPO_AUTORIDAD_RESPONSABLE))).sendKeys(ConstantsInmuebles.CONTENIDO_AUTORIDAD_RESPONSABLE);
		ComponentCommon.registrarEnLog(" Registro Detalle Documento: ...");
		this.driver.findElement(By.id(ID_CAMPO_FECHA_DOCUMENTO)).sendKeys(getFechaSistema());		
		this.driver.findElement(By.id(ID_CAMPO_SERIE)).sendKeys(ComponentCommon.getNroAleatorio(11));		
		this.driver.findElement(By.id(ID_CAMPO_NUMERO_FOJAS)).sendKeys(String.valueOf(ComponentCommon.getNroAleatorio(1, 9)));		
		this.driver.findElement(By.id(ID_BOTON_ACEPTAR)).click();
		ComponentCommon.registrarEnLog(" Registro Detalle Documento: OK.");
	}
	
	private void registrarDatosGestorTramite()
	{
		final String ID_CAMPO_NUMERO_CAMPO     = "txtNroDocumento";
		final String ID_BOTON_BUSCAR           = "btnBuscar";
		final String ENLACE_ASOCIAR            = "Asociar";
		final String ID_CAMPO_NOMBRES          = "txtNombre1";
		final String ID_CAMPO_APELLIDO         = "txtApellido1";
		final String ID_CAMPO_FECHA_NACIMIENTO = "txtFechaNac";
		final String ID_CAMPO_DIRECCION        = "txtDireccion";
		final String ID_BOTON_ACEPTAR          = "btnSubmit";
		
		ComponentCommon.registrarEnLog(" Registro Gestor Trámite: ...");
		this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(ID_CAMPO_NUMERO_CAMPO))).sendKeys(String.valueOf(ComponentCommon.getNroAleatorio(1, 9)));
		this.driver.findElement(By.id(ID_BOTON_BUSCAR)).click();
		
		this.wait.until(ExpectedConditions.or(ExpectedConditions.alertIsPresent(),
				                              ExpectedConditions.visibilityOfElementLocated(By.linkText(ENLACE_ASOCIAR))));		
		if(cuadroDialogoEstaPresente())
		{
			this.driver.switchTo().alert().accept();			
			this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(ID_CAMPO_NOMBRES))).sendKeys(ConstantsInmuebles.NOMBRE_APELLIDO_GESTOR_TRAMITE);
			driver.findElement(By.id(ID_CAMPO_APELLIDO)).sendKeys(ConstantsInmuebles.NOMBRE_APELLIDO_GESTOR_TRAMITE);
			driver.findElement(By.id(ID_CAMPO_FECHA_NACIMIENTO)).sendKeys(ConstantsInmuebles.FECHA_NACIMIENTO);
			driver.findElement(By.id(ID_CAMPO_DIRECCION)).sendKeys(ConstantsInmuebles.DIRECCION);			
			driver.findElement(By.id(ID_BOTON_ACEPTAR)).click();
		}
		else
		{
			this.driver.findElement(By.linkText(ENLACE_ASOCIAR)).click();			
			this.wait.until(ExpectedConditions.or(ExpectedConditions.visibilityOfElementLocated(By.id(ID_CAMPO_DIRECCION)),
                    						      ExpectedConditions.visibilityOfElementLocated(By.xpath(Constants.PATH_TITULO_VISTA))));			
			try
			{
				driver.findElement(By.id(ID_CAMPO_DIRECCION)).sendKeys(ConstantsInmuebles.DIRECCION);
				driver.findElement(By.id(ID_BOTON_ACEPTAR)).click();
			}
			catch(NoSuchElementException noRequiereDatoDireccionExcepcion) {  }
		}
		ComponentCommon.registrarEnLog(" Registro Gestor Trámite: OK.");
	}
	
	public void registrarSolicitud()
	{
		final String ID_COMBO_ORIGEN_SOLICITUD    = "cbxOrigen";
		final String ID_CAMPO_FECHA               = "txtFecha";
		final String PREFIJO_PATH_DATOS_SOLICITUD = "//*[@id='ventana']/form/table/tbody/tr";
		final String ID_AREA_TEXTO_OBSERVACIONES  = "txaObservaciones";
		final String ID_NUMERO_DOCUMENTO          = "txtNumeroDocumento";
	    final String ID_AUTORIZADO_POR            = "txtAutoridad";
	    final String ID_CARGO 					  = "txtCargo";
	    
	    int              filaDatosSolicitud  = 0;
	    String           pathDatosSolicitud  = "";
	    List<WebElement> filasDatosSolicitud = null;
	    
		this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(getPathTituloVista(ConstantsInmuebles.NOMBRE_FORM_VISTA_UBICACION_INMUEBLE_REGISTRAR_SOLICITUD))));		
		ComponentCommon.registrarEnLog("Registro de Solicitud: ...");
		
		if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_COMBO_ORIGEN_SOLICITUD ) )
		{
			new Select ( this.driver.findElement ( By.id ( ID_COMBO_ORIGEN_SOLICITUD ) ) ).selectByIndex ( 1 );			
		}
	
		this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(getPathTituloVista(ConstantsInmuebles.NOMBRE_FORM_VISTA_UBICACION_INMUEBLE_REGISTRAR_SOLICITUD))));
		this.driver.findElement(By.id(ID_CAMPO_FECHA)).sendKeys(getFechaSistema());		
		filaDatosSolicitud  = this.driver.findElements(By.xpath(PREFIJO_PATH_DATOS_SOLICITUD)).size() - 2;
		pathDatosSolicitud  = PREFIJO_PATH_DATOS_SOLICITUD.concat("[").concat(String.valueOf(filaDatosSolicitud)).concat("]/td/table/tbody/tr");
		filasDatosSolicitud = this.driver.findElements(By.xpath(pathDatosSolicitud));		
		if(filasDatosSolicitud.get(2).findElement(By.xpath(ConstantsInmuebles.PATH_COLUMNA_TITULO)).getText().startsWith("*"))
		{
			this.driver.findElement(By.id(ID_NUMERO_DOCUMENTO)).sendKeys(ConstantsInmuebles.CONTENIDO_NUMERO_DOCUMENTO);
		}
		if (filasDatosSolicitud.get(3).findElement(By.xpath(ConstantsInmuebles.PATH_COLUMNA_TITULO)).getText().startsWith("*"))
		{
			this.driver.findElement(By.id(ID_AUTORIZADO_POR)).sendKeys(ConstantsInmuebles.CONTENIDO_AUTORIZADO_POR);
		}
		if (filasDatosSolicitud.get(4).findElement(By.xpath(ConstantsInmuebles.PATH_COLUMNA_TITULO)).getText().startsWith("*"))
		{
			this.driver.findElement(By.id(ID_CARGO)).sendKeys(ConstantsInmuebles.CONTENIDO_CARGO);
		}
		if(filasDatosSolicitud.get(5).findElement(By.xpath(ConstantsInmuebles.PATH_COLUMNA_TITULO)).getText().startsWith("*"))
		{
			this.driver.findElement(By.id(ID_AREA_TEXTO_OBSERVACIONES)).sendKeys(ConstantsInmuebles.CONTENIDO_AREA_TEXTO);
		}			
		capturarPantalla();
		moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_NAME);
		ComponentCommon.registrarEnLog("Registro de Solicitud: OK.");
	}
	
	public void datosConstruccionesVU(int numeroConstruccion, String anioConstruccion)
	{
		final String ID_ENLACE_ADICIONAR_CONSTRUCCION = "lnkAddConstruccion";
		final String ID_CAMPO_BLOQUE                  = "txtBloque";
		final String PATH_TIPO_BLOQUE                 = "//*[@id='ventana']/form/table/tbody/tr[6]/td/table/tbody/tr[1]/td/span";
		final String ID_CAMPO_GESTION                 = "txtAnioInicioImp";
		final String VALOR_CLASE                      = "esRequerido";
		final String ID_COMBO_TIPO_CONSTRUCCION       = "{actionForm.tipoConstruccion}";
		final String ID_CAMPO_ANIO_CONSTRUCCION       = "txtAnioConstruccion";
		final String ID_CAMPO_SUPERFICIE              = "txtSuperficie";
		final String ID_COMBO_USO_CONSTRUCCION        = "{actionForm.usoConstruccion}";
		
		this.wait.until(ExpectedConditions.textToBe(By.xpath(Constants.PATH_TITULO_VISTA), "DATOS CONSTRUCCIONES"));
		moverScroll(this.driver.findElement(By.id(ID_ENLACE_ADICIONAR_CONSTRUCCION)));
		capturarPantalla();
		this.driver.findElement(By.id(ID_ENLACE_ADICIONAR_CONSTRUCCION)).click();
		ComponentCommon.registrarEnLog(" Datos Construcción [".concat(String.valueOf(numeroConstruccion + 1)).concat("]: ..."));
		this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(ID_CAMPO_BLOQUE)));			
		
		if(this.driver.findElement(By.xpath(PATH_TIPO_BLOQUE)).getText().trim().equalsIgnoreCase("(Alfabético)") ||
		   this.driver.findElement(By.xpath(PATH_TIPO_BLOQUE)).getText().trim().equalsIgnoreCase("(Alfanumérico)"))
		{				
			this.driver.findElement ( By.id ( ID_CAMPO_BLOQUE ) ).clear ( );
			this.driver.findElement ( By.id ( ID_CAMPO_BLOQUE ) ).sendKeys ( ComponentCommon.getBloqueAlfabeticoConstruccion ( numeroConstruccion ) );									
		}
		
		if(this.driver.findElement(By.id(ID_CAMPO_GESTION)).getAttribute(ConstantsInmuebles.ATRIBUTO_CSS_CLASE).equals(VALOR_CLASE))		
		{
			this.driver.findElement(By.id(ID_CAMPO_GESTION)).sendKeys(anioConstruccion);
		}	
		this.driver.findElement(By.id(ID_CAMPO_ANIO_CONSTRUCCION)).sendKeys(anioConstruccion);
		this.driver.findElement(By.id(ID_CAMPO_SUPERFICIE)).sendKeys(ConstantsInmuebles.SUPERFICIE_CONSTRUCCION_VIVIENDA_UNIFAMILIAR);
		
		try
		{
			this.wait.until(ExpectedConditions.or(ExpectedConditions.stalenessOf(this.driver.findElement(By.id(ID_COMBO_TIPO_CONSTRUCCION))),
	                                             (ExpectedCondition<Boolean>) condicionEspera -> new Select(this.driver.findElement(By.id(ID_COMBO_TIPO_CONSTRUCCION))).getOptions().size() > 1));
		}
		catch(StaleElementReferenceException comboTipoConstruccionRefrescadoExcepcion)
		{
			this.wait.until(ExpectedConditions.or(ExpectedConditions.stalenessOf(this.driver.findElement(By.id(ID_COMBO_TIPO_CONSTRUCCION))),
	                                             (ExpectedCondition<Boolean>) condicionEspera -> new Select(this.driver.findElement(By.id(ID_COMBO_TIPO_CONSTRUCCION))).getOptions().size() > 1));
		}	
		new Select(this.driver.findElement(By.id(ID_COMBO_TIPO_CONSTRUCCION))).selectByIndex(ComponentCommon.getNroAleatorio(1, new Select(this.driver.findElement(By.id(ID_COMBO_TIPO_CONSTRUCCION))).getOptions().size() - 1)); 
		
		if(elementoWebEstaPresente(Constants.TIPO_LOCALIZADOR_ID, ID_COMBO_USO_CONSTRUCCION))
		{
			new Select(this.driver.findElement(By.id(ID_COMBO_USO_CONSTRUCCION))).selectByIndex(1); //CBA
		}
		capturarPantalla();
		moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_ID);		
		this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Constants.ID_NAME_BOTON_ACEPTAR)));
		ComponentCommon.registrarEnLog(" Datos Construcción [".concat(String.valueOf(numeroConstruccion + 1)).concat("]: OK."));
	}
	
	public void confirmarDatos()	{
		
		esperarVista ( "CONFIRMACION DATOS" );
		ComponentCommon.registrarEnLog ( "Confirmación de Datos: ..." ) ;
		capturarPantalla ( );
		
		try
		{
			moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_ID);
		}
		catch(NoSuchElementException noEncuentraBotonAceptarPorIdExcepcion)
		{
			moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_NAME);
		}
		ComponentCommon.registrarEnLog("Confirmación de Datos: OK.");
	}
	
	public void grabarTramite ( )
	{		
		final String PATH_BOTON_GRABAR = "//input[@value='Grabar']";
		
		long tiempoInicial = 0; 
		
		this.driver.findElement ( By.xpath ( PATH_BOTON_GRABAR ) ).click ( );  
	    tiempoInicial = System.currentTimeMillis ( );
	   	ComponentCommon.registrarEnLog ( "Grabar, Generar y Descargar Reporte: ..." );
	   	
	   	this.wait.until ( ExpectedConditions.or ( ExpectedConditions.alertIsPresent ( ),
	   			                                  ExpectedConditions.visibilityOfElementLocated ( By.xpath ( Constants.PATH_VALIDACIONES ) ),
	   			                                  ExpectedConditions.visibilityOfElementLocated ( By.cssSelector ( Constants.SELECTOR_CSS_CODIGO_ERROR ) ) ) );
	   	
	   	if ( cuadroDialogoEstaPresente ( ) )
	   	{
	   		this.wait.until ( ExpectedConditions.alertIsPresent ( ) ).accept ( );
		   	ComponentCommon.registrarEnLog ( " Tiempo [procesamiento]: ".concat ( ComponentCommon.formatearTiempoEjecucion ( System.currentTimeMillis ( ) - tiempoInicial ) ) );
		   	
		    for ( int i = 0; i < ( ConstantsInmuebles.PERMITIR_EMPADRONAMIENTO_MASIVO? ConstantsInmuebles.NUMERO_INMUEBLES_EMPADRONAMIENTO_MASIVO - 1: 0 ); i ++ )
		    {
		    	this.driver.navigate ( ).back ( );
		    	this.wait.until ( ExpectedConditions.elementToBeClickable ( By.xpath ( PATH_BOTON_GRABAR ) ) ).click ( );
				System.out.println ( " Inmueble ".concat ( String.valueOf ( i + 1 ) ) );
			   	this.wait.until ( ExpectedConditions.alertIsPresent ( ) ).accept ( );
		    }
	   	}
	   	else
	   	{
	   		if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_XPATH, Constants.PATH_VALIDACIONES ) && getTituloVista ( ).equalsIgnoreCase( "VALIDACIONES" )  )
			{
				capturarPantalla ( );
				this.mensajeError.append ( this.driver.findElement ( By.xpath ( Constants.PATH_VALIDACIONES ) ).getText ( ) );
				throw new AssertionError ( this.mensajeError.toString ( ) );
			}
			
			if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_CSS_SELECTOR, Constants.SELECTOR_CSS_CODIGO_ERROR ) )
			{
				capturarPantalla ( );
				throw new AssertionError ( procesarErrorAplicativo ( ) );
			}
	   	}
	}
	
	public void volverMenuPrincipal()
	{
		final String ID_LOGO_APLICATIVO = "logo-aplicacion";
		
		this.driver.switchTo().parentFrame();
		this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(ID_LOGO_APLICATIVO)));
		//if (this.driver.findElement(By.id(ID_LOGO_APLICATIVO)).isSelected())
		//{
			this.driver.findElement(By.id(ID_LOGO_APLICATIVO)).click();
		//}
		this.wait.until(ExpectedConditions.presenceOfElementLocated(By.id(ID_LOGO_APLICATIVO)));		
		this.driver.switchTo().defaultContent();	
	}
	
	public String generarNroTramite()
	{
		return new StringBuilder().append("T-JAPONES").append(ComponentCommon.getNroAleatorio(6)).toString();
	}
	
	public String getFechaSistema()
	{
		final String ID_FECHA           = "fecha";
		final String ID_FRAME_PRINCIPAL = "ifrm-contenido";
		
		String          dia          = "";
		String          fechaSistema = "";
		StringTokenizer separador    = null;
		
		this.driver.switchTo().defaultContent();	
		separador = new StringTokenizer(driver.findElement(By.id(ID_FECHA)).getText());		
		separador.nextToken();
		dia = separador.nextToken();
		if(dia.length() == 1) 
		{
			dia = "0".concat(dia);
		}		
		fechaSistema = dia.concat("/");		
		separador.nextToken();		
		switch(separador.nextToken().toUpperCase())
		{
			case "ENERO"	  : fechaSistema = fechaSistema.concat("01"); break;
			case "FEBRERO"	  : fechaSistema = fechaSistema.concat("02"); break;
			case "MARZO"	  : fechaSistema = fechaSistema.concat("03"); break;
			case "ABRIL"	  : fechaSistema = fechaSistema.concat("04"); break;
			case "MAYO"		  : fechaSistema = fechaSistema.concat("05"); break;
			case "JUNIO"	  : fechaSistema = fechaSistema.concat("06"); break;
			case "JULIO"	  : fechaSistema = fechaSistema.concat("07"); break;
			case "AGOSTO"	  : fechaSistema = fechaSistema.concat("08"); break;
			case "SEPTIEMBRE" : fechaSistema = fechaSistema.concat("09"); break;
			case "OCTUBRE"	  : fechaSistema = fechaSistema.concat("10"); break;
			case "NOVIEMBRE"  : fechaSistema = fechaSistema.concat("11"); break;
			case "DICIEMBRE"  : fechaSistema = fechaSistema.concat("12"); break;
		}		
		separador.nextToken();		
		fechaSistema = fechaSistema.concat("/").concat(separador.nextToken());		
		this.wait.until(ExpectedConditions.frameToBeAvailableAndSwitchToIt(this.driver.findElement(By.id(ID_FRAME_PRINCIPAL))));
	
		return fechaSistema;
	}
	
	public String getAnioSistema()
	{
		return getFechaSistema().substring(6);
	}
	
	public void generar()
	{
	}
	
	/**
	 * Se modificó para que se utilice el archivo de datos Excel correspondiente: si se trata de generadores, el archivo 
	 * Datos.xls, y si se trata de tests, el archivo Tests.xls
	 * @return ambiente
	 * --------------------------------------------------------------------------------------------------------------------------------------
	 * Se adecuó para recuperar desde la hoja de datos, directamente la URL del ambiente destino. Se eliminaron referencias de constantes.
	 */
	public String getAmbiente ( )
	{
		DataTest archivoConfiguracion = null;
		
		if(this.ambiente == null) 
		{
			if ( !this.usarDatosAmbienteTest )
			{
				archivoConfiguracion = new DataTest( Constants.ARCHIVO_DATOS_PAGINA, Constants.HOJA_DATOS_O_PARAMETRO_AMBIENTE );
			}
			else
			{
				archivoConfiguracion = new DataTest( Constants.ARCHIVO_DATOS_PRUEBA, Constants.HOJA_DATOS_O_PARAMETRO_AMBIENTE );
			}
			
			setAmbiente(archivoConfiguracion.getParametro(Constants.HOJA_DATOS_O_PARAMETRO_AMBIENTE).get(0));
		}
		return this.ambiente; 
	}	
	
	public void setAmbiente(String ambiente)
	{
		this.ambiente = ambiente;
	}
	
	/**
	 * Método capturarPantalla()
	 * Se reemplazó el método para guardar la captura de pantalla por actualización a la versión 3.141.59 de Selenium Webdriver.
	 * De FileUtils.copyFile() por FileHandler.copy()
	 */	
	public String capturarPantalla()
	{
		final String ID_IFRAME_PRINCIPAL   = "ifrm-contenido";
		final String PREFIJO_INMUEBLE      = "Inmueble_";
		final String PREFIJO_NOMBRE_VISTA  = "_Vista_";
		final String EXTENSION_TIPO_IMAGEN = ".png";
		
		int           numeroArchivos            = 0;
		File          archivoCapturaPantalla    = null;
		File          archivosDirectorio []     = null;
		String        nroInmueble               = "";
		String        municipioFormateado       = "";
		String        fechaHoraInicioFormateado = "";
		StringBuilder rutaArchivos              = null;
		StringBuilder nombreArchivo             = null;
		
		this.driver.switchTo().defaultContent();		
		this.wait.until(ExpectedConditions.or(ExpectedConditions.alertIsPresent(), 
				                              ExpectedConditions.frameToBeAvailableAndSwitchToIt(By.id(ID_IFRAME_PRINCIPAL))));	
		if(cuadroDialogoEstaPresente())
		{
			this.driver.switchTo().alert().accept();
		}
		archivoCapturaPantalla    = ((TakesScreenshot) this.driver).getScreenshotAs(OutputType.FILE);		
		rutaArchivos              = new StringBuilder();
		nroInmueble               = this.numeroInmueble == null? this.getClass().getSimpleName(): this.numeroInmueble;
		municipioFormateado       = "(".concat(getAbreviacionAlcaldia(this.municipio)).concat(")");
		fechaHoraInicioFormateado = this.fechaHoraInicio.substring(0, this.fechaHoraInicio.length() - 7).replaceAll("/", "_").replaceAll(":", "_").replaceAll(" ", "__");
		rutaArchivos.append(Constants.DIRECTORIO_LOGS).append(PREFIJO_INMUEBLE).append(nroInmueble).append(municipioFormateado).append(fechaHoraInicioFormateado).append("/");
		if(new File(rutaArchivos.toString()).exists())
		{
			archivosDirectorio = new File(rutaArchivos.toString()).listFiles();
			if(archivosDirectorio.length > 0 && archivosDirectorio[0].exists())
			{
				numeroArchivos = Integer.parseInt(archivosDirectorio[0].getName().substring(0, archivosDirectorio[0].getName().indexOf("_")));
			}
			for(int i = 1; i < archivosDirectorio.length; i ++)
			{	
				if(Integer.parseInt(archivosDirectorio[i].getName().substring(0, archivosDirectorio[i].getName().indexOf("_"))) > numeroArchivos)
				{
					numeroArchivos = Integer.parseInt(archivosDirectorio[i].getName().substring(0, archivosDirectorio[i].getName().indexOf("_")));
				}
			}
		}
		else
		{
			new File(rutaArchivos.toString()).mkdir();
		}
		
		nombreArchivo = new StringBuilder();
		nombreArchivo.append(String.valueOf(numeroArchivos + 1)).append("_").append(PREFIJO_INMUEBLE).append(this.numeroInmueble == null? "": this.numeroInmueble).append("_")
		             .append(this.getClass().getSimpleName()).append(PREFIJO_NOMBRE_VISTA).append(getTituloVista()).append(EXTENSION_TIPO_IMAGEN);
		try 
		{
			FileHandler.copy(archivoCapturaPantalla, new File((rutaArchivos.toString()).concat(nombreArchivo.toString()))); //27/02/2019
		} 
		catch (IOException noEncuentraArchivoImagenExcepcion) 
		{
			noEncuentraArchivoImagenExcepcion.printStackTrace();
			ComponentCommon.registrarEnLog(" Captura de imagen no encontrada.");
		}
		return nombreArchivo.toString();	
	}	
	
	public void confirmarTramite ( )
	{
		final String PATH_BOTONES        = "//*[@id='ventana']/form/table/tbody/tr[2]/td/table/tbody/tr";
		final String SUFIJO_PATH_BOTONES = "]/td[3]/input";
		final String PATH_BOTON_GRABAR   = "//input[@value='Grabar']";
		
		boolean     grabaTramite = true;
		Set<String> ventanas     = null;
		
		this.wait.until(ExpectedConditions.visibilityOfAllElementsLocatedBy(By.xpath(PATH_BOTONES)));
		if(elementoWebEstaPresente(Constants.TIPO_LOCALIZADOR_XPATH, PATH_BOTON_GRABAR))
		{
			grabarTramite();		
		}
		else
		{
			ComponentCommon.registrarEnLog("Generar y Descargar Reporte: ...");
			grabaTramite = false;
		}
		
		if(this.driver.findElement(By.xpath(PATH_BOTONES.concat("[").concat(String.valueOf(this.driver.findElements(By.xpath(PATH_BOTONES)).size() - 1)).concat(SUFIJO_PATH_BOTONES))).getAttribute("value").equalsIgnoreCase("Generar Reporte"))
		{
			this.driver.findElement(By.xpath(PATH_BOTONES.concat("[").concat(String.valueOf(this.driver.findElements(By.xpath(PATH_BOTONES)).size() - 1)).concat(SUFIJO_PATH_BOTONES))).click();
		}
		else
		{
			this.driver.findElement(By.xpath(PATH_BOTONES.concat("[").concat(String.valueOf(this.driver.findElements(By.xpath(PATH_BOTONES)).size() - 2)).concat(SUFIJO_PATH_BOTONES))).click();
		}
		this.wait.until(ExpectedConditions.numberOfWindowsToBe(2));
		ventanas = this.driver.getWindowHandles();		
		this.driver.switchTo().window(ventanas.toArray()[ventanas.toArray().length - 1].toString());		
		this.wait.until(ExpectedConditions.titleIs(Constants.TITULO_VENTANA_REPORTE));		
		this.driver.close();
		this.driver.switchTo().window(ventanas.toArray()[ventanas.toArray().length - 2].toString());	
		ComponentCommon.registrarEnLog(" Archivo: ".concat(ComponentCommon.obtenerNombreArchivoUltimoPdfGenerado()));
		this.nombresArchivoReportes.add(ComponentCommon.obtenerNombreArchivoUltimoPdfGenerado());
		capturarPantalla();
		ComponentCommon.registrarEnLog(grabaTramite? "Grabar, Generar y Descargar Reporte: OK.": "Generar y Descargar Reporte: OK.");
	}
	
	/**
	 * Método esperarDescargaReporte ( ): espera a que se despliegue la ventana del reporte y luego esta sea cerrada.
	 */
	public void esperarDescargaReporte ( )
	{
		Set < String > ventanas = null;
		
		this.wait.until ( ExpectedConditions.numberOfWindowsToBe ( 2 ) );
		ventanas = this.driver.getWindowHandles ( );		
		this.driver.switchTo ( ).window ( ventanas.toArray ( ) [ ventanas.toArray ( ).length - 1 ].toString ( ) );		
		this.wait.until (ExpectedConditions.titleIs(Constants.TITULO_VENTANA_REPORTE));		
		this.driver.close ( );
		this.driver.switchTo ( ).window ( ventanas.toArray ( ) [ ventanas.toArray ( ).length - 2 ].toString ( ) );	
	}
	
	public boolean cuadroVerificacionHabilitado(WebElement cuadroVerificacion)
	{
		if(cuadroVerificacion.getAttribute(ConstantsInmuebles.ATRIBUTO_DESHABILITADO) == null)
		{
			return true;
		}
		else
		{
			return false;
		}
	}
	
	public Hashtable<Integer, ArrayList<String>> getValoresTabla(String pathTabla)
	{
		wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(pathTabla)));				
		List<WebElement> filasTabla = driver.findElements(By.xpath(pathTabla));
		Hashtable<Integer, ArrayList<String>> tabla = new Hashtable<Integer, ArrayList<String>>();
		ArrayList<String> temp;
		
		for(int i = 1; i < filasTabla.size(); i ++)
		{
			temp = new ArrayList<String>();
			List<WebElement> columnasTabla = filasTabla.get(i).findElements(By.xpath("td"));
			
			for(int j = 0; j < columnasTabla.size(); j ++)
				temp.add(columnasTabla.get(j).getText());
			
			tabla.put(i, temp);
		}
		
		return tabla;
	}
	
	public Hashtable<Integer, ArrayList<WebElement>> getElementosWebTabla(String pathTabla)
	{		
		int                                       indice        = 1;
		List<WebElement>                          filasTabla    = null;
		List<WebElement>                          columnasTabla = null;
		ArrayList<WebElement>                     temporal      = null;
		Hashtable<Integer, ArrayList<WebElement>> tabla         = null;
		
		filasTabla = this.driver.findElements(By.xpath(pathTabla));
		tabla      = new Hashtable<Integer, ArrayList<WebElement>>();	
		
		for(int i = 0; i < filasTabla.size(); i ++)
		{
			temporal      = new ArrayList<WebElement>();
			columnasTabla = filasTabla.get(i).findElements(By.xpath(ConstantsInmuebles.PATH_COLUMNA));	
			
			for(int j = 0; j < columnasTabla.size(); j ++)
			{
				if(!columnasTabla.get(j).getText().equals(" ") && columnasTabla.size() > 1)
				{
					temporal.add(columnasTabla.get(j));
				}
			}
			if(!temporal.isEmpty())
			{
				tabla.put(indice, temporal);
				indice ++;
			}
		}		
		return tabla;
	}
	
	public String generarGeocodigo(boolean esPH)
	{
		StringBuilder geocodigo = new StringBuilder();
		
		geocodigo.append(String.valueOf((int)(Math.random() *3 + 19)));   //Zona UTM
		
		for(int i = 0; i < 7; i ++)
			geocodigo.append(String.valueOf((int)(Math.random() * 10))); //Coordenada vértice-inferior izquierda
		
		geocodigo.append(((int)(Math.random()*2) == 0)? "N": "S");       //Hoja
				
		geocodigo.append(String.valueOf((int)(Math.random() * 6)));      //Cuadrícula
		geocodigo.append(geocodigo.charAt(geocodigo.length() - 1) == '0'? String.valueOf((int)(Math.random() * 9 + 1)):geocodigo.charAt(geocodigo.length() - 1) == '5'? "0": String.valueOf((int)(Math.random() * 10)));
		
		for(int i = 0; i < 3; i ++)
			geocodigo.append(String.valueOf((int)(Math.random()*10)));   //Objeto geográfico
		
		for(int i = 0; i < 7; i ++)
		{	
			if(esPH)
				geocodigo.append(String.valueOf((int)(Math.random() * 10)));
			else
				geocodigo.append("0");
		}
		
		return geocodigo.toString();
	}
	
	public String getUsuario(int i)
	{
		if(this.datosExcel.getParametro("USUARIO").get(i).contains("."))
		{
			return this.datosExcel.getParametro("USUARIO").get(i).substring(0, this.datosExcel.getParametro("USUARIO").get(i).indexOf("."));
		}
		else
		{
			return this.datosExcel.getParametro("USUARIO").get(i);
		}
	}
	
	/**
	 * Método generador(): método genérico que permite realizar las acciones comunes para un generador: autentificar e iterar por todos 
	 * los datos de prueba.
	 */
	public <E extends ComponentCommonInmuebles> void generador()
	{
		long         tiempoEjecucionInicial = 0;
		String       municipioActual        = "";
		String       municipioAnterior      = "";
		boolean      iniciarSesion          = true;	
		
		tiempoEjecucionInicial = System.currentTimeMillis();
		for(int fila_i = 0; fila_i < this.datosExcel.getNroDatosPrueba(); fila_i ++)
		{
			try
			{
				this.accionesYDerechos = false;
				municipioActual        = this.datosExcel.getParametro(Constants.PARAMETRO_MUNICIPIO).get(fila_i);
				municipioAnterior      = fila_i > 0 ? this.datosExcel.getParametro(Constants.PARAMETRO_MUNICIPIO).get(fila_i - 1): "";
				iniciarSesion          = municipioActual.equals(municipioAnterior) ? false: true;				
				this.cargarParametros(fila_i);				
				if(iniciarSesion)
				{
					this.iniciarAplicacion(getAmbiente(), this.getMunicipio(), getUsuario(fila_i));
				}
				this.generar();
			}
			catch(AssertionError falloFlujo)
			{
				procesarFallo(falloFlujo);
			}
			catch(Exception generarExcepcion)
			{
				procesarExcepcionInmuebles(generarExcepcion);
			}
			finally
			{
				ComponentCommon.registrarEnLog ( Constants.CADENA_FIN_ITERACION );
				try
				{
					volverMenuPrincipal ( );
				}
				catch ( Exception generarExcepcion ) { }
			}
		}		
		ComponentCommon.registrarEnLog("TIEMPO EJECUCIÓN TOTAL: ".concat(ComponentCommon.formatearTiempoEjecucion(System.currentTimeMillis() - tiempoEjecucionInicial)));
		ComponentCommon.registrarEnLog(Constants.CADENA_FIN_EJECUCION_TOTAL );
	}
	
	public String getPathTituloVista(String nombreFormulario)
	{
		return new StringBuilder().append("//*[@id='").append(nombreFormulario).append("']/table/tbody/tr[1]/td/h2").toString();
	}
	
	/**
	 * Método datosAdicionales(): Realiza el flujo de la vista Datos Adicionales.
	 * ---------------------------------------------------------------------------------------------------------------------------------------------------
	 * Se agregaron llamadas a los métodos seleccionarAleatorioEnCombo ( ) y escribeValorMaximoEnCampoTexto ( ); además, se factorizó código.
	 */
	public void datosAdicionales ( String anioInicioImpuesto )
	{
		final String ID_COMBO_PROVINCIA           = "{actionForm.provincia}";
		final String PATH_FECHA                   = "//*[@id='frmDatoAdicional']/table/tbody/tr[5]/td/table/tbody/tr[5]/th";
		final String ID_CAMPO_FECHA               = "txtFecha";		
		final String PATH_NUMERO_DOCUMENTO        = "//*[@id='frmDatoAdicional']/table/tbody/tr[5]/td/table/tbody/tr[3]/th";
		final String ID_NUMERO_DOCUMENTO          = "txtNumeroFojas";
		final String PATH_INSTRUMENTO             = "//*[@id='frmDatoAdicional']/table/tbody/tr[5]/td/table/tbody/tr[6]/th";
		final String ID_COMBO_INSTRUMENTO         = "{actionForm.tipoInstrumento}";
		final String ID_CAMPO_SUPERFICIE_MENSURA  = "txtSuperficieMensura";
		final String PATH_PARTIDA_O_MATRICULA     = "//*[@id='frmDatoAdicional']/table/tbody/tr[5]/td/table/tbody/tr[8]/th";
		final String ID_CAMPO_PARTIDA_O_MATRICULA = "txtPartida";
		
		Select comboProvincia   = null;
		Select comboInstrumento = null;
		
		if ( esperarVista ( "DATOS ADICIONALES" ) )
		{
			ComponentCommon.registrarEnLog ( "Datos Adicionales: ..." );
			
			if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_COMBO_PROVINCIA ) && 
			     this.driver.findElement ( By.id ( ID_COMBO_PROVINCIA ) ).getTagName ( ).equals ( ConstantsInmuebles.ETIQUETA_COMBO ) )
			{
				comboProvincia = new Select ( this.driver.findElement ( By.id ( ID_COMBO_PROVINCIA ) ) );
				seleccionarAleatorioEnCombo ( comboProvincia );
			}
			
			if( this.driver.findElement ( By.xpath ( PATH_NUMERO_DOCUMENTO ) ).getText ( ).startsWith ( "*" ) )
			{
				escribeValorMaximoEnCampoTexto ( ID_NUMERO_DOCUMENTO );
			}
			
			if ( this.driver.findElement ( By.xpath ( PATH_FECHA ) ).getText ( ).startsWith ( "*" ) )
			{
				if ( anioInicioImpuesto.contains ( "/" ) )
				{
					this.driver.findElement ( By.id ( ID_CAMPO_FECHA ) ).sendKeys ( anioInicioImpuesto );
				}
				else
				{
					this.driver.findElement ( By.id ( ID_CAMPO_FECHA ) ).sendKeys ( "01/01/".concat ( anioInicioImpuesto ) );
				}
			}
			
			if ( this.driver.findElement ( By.xpath ( PATH_INSTRUMENTO ) ).getText ( ).startsWith ( "*" ) )
			{
				comboInstrumento = new Select ( this.driver.findElement ( By.id ( ID_COMBO_INSTRUMENTO ) ) );
				seleccionarAleatorioEnCombo ( comboInstrumento );
			}
			
			if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_SUPERFICIE_MENSURA ) )		// SANTA CRUZ, LA GUARDIA, WARNES
			{
				this.driver.findElement ( By.id ( ID_CAMPO_SUPERFICIE_MENSURA ) ).sendKeys ( ConstantsInmuebles.SUPERFICIE_TERRENO );
			}
			
			if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_PARTIDA_O_MATRICULA ) &&
				 this.driver.findElement ( By.xpath ( PATH_PARTIDA_O_MATRICULA ) ).getText ( ).contains ( "*" ) )
			{
					escribeValorMaximoEnCampoTexto(ID_CAMPO_PARTIDA_O_MATRICULA);
			}
			
			capturarPantalla ( );
			moverScrollYAceptar ( Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_NAME );
			ComponentCommon.registrarEnLog ( "Datos Adicionales: OK." );		
		}
	}
	
	/**
	 * Método generaCodigoCatastral(): Genera código catastral de forma aleatoria y de acuerdo al municipio.
	 */
	public String generarCodigoCatastral(String area, String claseInmueble)
	{
		final String codigoPropiedadHorizontal = "1";
		final String codigoPropiedadAgraria    = "6";                            
		
		StringBuilder codigoCatastral = new StringBuilder();
		
		switch(this.municipio)
		{
			case "COCHABAMBA":
				codigoCatastral.append(area.equals(ConstantsInmuebles.AREA_URBANO) && !claseInmueble.equals(ConstantsInmuebles.CLASE_PROPIEDAD_AGRARIA)? 
									   String.valueOf(ComponentCommon.getNroAleatorio(0, 3)).concat(String.valueOf(ComponentCommon.getNroAleatorio(1, 7)))
									   : ComponentCommon.getNroAleatorio(2, 3) == 2? 29: 30 + ComponentCommon.getNroAleatorio(0, 2));
				codigoCatastral.append("-").append(ComponentCommon.getNroAleatorio(3)).append("-").append(ComponentCommon.getNroAleatorio(3)).append("-");
				codigoCatastral.append(area.equals(ConstantsInmuebles.AREA_URBANO) && claseInmueble.equals(ConstantsInmuebles.CLASE_PROPIEDAD_HORIZONTAL)? codigoPropiedadHorizontal
						               : area.equals(ConstantsInmuebles.AREA_RURAL) || claseInmueble.equals(ConstantsInmuebles.CLASE_PROPIEDAD_AGRARIA)? codigoPropiedadAgraria
						               : (ComponentCommon.getNroAleatorio(2, 3) == 2)? ComponentCommon.getNroAleatorio(2, 4): ComponentCommon.getNroAleatorio(7, 9));				
				codigoCatastral.append("-").append(ComponentCommon.getNroAleatorio(2)).append("-").append(ComponentCommon.getNroAleatorio(3)).append("-").append(ComponentCommon.getNroAleatorio(3));
			break;
			case "VILLA TUNARI": 
				codigoCatastral.append(ComponentCommon.getNroAleatorio(20));
			break;
			default:
				codigoCatastral.append(Constants.CODIGO_CATASTRAL_DEFECTO.concat(ComponentCommon.getNroAleatorio(8)));
			break;
		}
		return codigoCatastral.toString();
	}
	
	/**
	 * Método generaCodigoCatastral(): Genera código catastral de forma aleatoria y de acuerdo al municipio.
	 */
	public String generarCodigoCatastral()
	{                          
		final String PREFIJO_COORDENADAS[] = {"X000", "Y000"};
		
		StringBuilder codigoCatastral = new StringBuilder();
		
		switch(this.municipio)
		{
			case "SANTA CRUZ": case "WARNES":
				codigoCatastral.append(PREFIJO_COORDENADAS[0]).append(ComponentCommon.getNroAleatorio(6)).
				                append(PREFIJO_COORDENADAS[1]).append(ComponentCommon.getNroAleatorio(6));
			break;
		}
		return codigoCatastral.toString();
	}
	
	/**
	 * Método datosCodigoCatastral(): Realiza el flujo de la vista Datos Código Catastral.
	 * ------------------------------------------------------------------------------------------------------------------------------------------------------
	 * Modificado: Edgar Figueredo		Fecha: 19/12/2019
	 * Se refactorizó código.
	 */
	public void datosCodigoCatastral ( String area )
	{
		final String ID_CAMPO_CODIGO_CATASTRAL = "codCatastral";		
		final String ID_COMBO_DISTRITO         = "ecCombo0";
		final String ID_COMBO_UNIDAD_VECINAL   = "ecCombo1";
		final String ID_COMBO_MANZANO          = "ecCombo2";
		final String ID_CAMPO_LOTE1            = "ecText3";
		final String ID_CAMPO_BLOQUE1          = "ecText4";
		final String ID_CAMPO_PISO1            = "ecText5";
		final String ID_CAMPO_DEPARTAMENTO1    = "ecText6";
		final String ID_CAMPO_UNIDAD_VECINAL   = "unidadVecinal";
		final String ID_CAMPO_DISTRITO         = "distrito";
		final String ID_CAMPO_MANZANO          = "manzano";
		final String ID_CAMPO_LOTE2            = "lote";
		final String ID_CAMPO_SUBLOTE          = "subLote";
		final String ID_CAMPO_BLOQUE2          = "bloque";
		final String ID_CAMPO_PISO2            = "piso";
		final String ID_CAMPO_DEPARTAMENTO2    = "departamento";
		final String PATH_DATO_AREA            = "//*[@id='ventana']/form/table/tbody/tr[2]/td/table[3]/tbody/tr[2]/td";
		
		int    longitudMaxima     = 0;
		String distrito           = "";
		String datoArea           = "";
		Select comboDistrito      = null;
		Select comboUnidadVecinal = null;
		Select comboManzano       = null;

		if ( esperarVista ( "DATOS CODIGO CATASTRAL" ) )
		{
			ComponentCommon.registrarEnLog ( "Datos Código Catastral: ...") ;	
			//SANTA CRUZ
			if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_LINK_TEXT, Constants.ENLACE_ADICIONAR ) )
			{
				this.driver.findElement ( By.linkText ( Constants.ENLACE_ADICIONAR ) ).click ( );
				esperarVista ( "DATOS CODIGO CATASTRAL" ); 
			}

			if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_CODIGO_CATASTRAL ) )
			{
				this.driver.findElement ( By.id ( ID_CAMPO_CODIGO_CATASTRAL ) ).clear ( );
				this.driver.findElement ( By.id ( ID_CAMPO_CODIGO_CATASTRAL ) ).sendKeys ( generarCodigoCatastral ( ) );
			}
			else
			{
				// MONTERO
				if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_COMBO_DISTRITO ) )
				{
					comboDistrito  = new Select ( this.driver.findElement ( By.id ( ID_COMBO_DISTRITO ) ) );	
					seleccionarAleatorioEnCombo ( comboDistrito );
					
					comboUnidadVecinal = new Select ( this.driver.findElement ( By.id ( ID_COMBO_UNIDAD_VECINAL ) ) );
					seleccionarAleatorioEnCombo ( comboUnidadVecinal );
					
					comboManzano   = new Select ( this.driver.findElement ( By.id ( ID_COMBO_MANZANO ) ) );
					seleccionarAleatorioEnCombo ( comboManzano );
					
					escribeValorMaximoEnCampoTexto ( ID_CAMPO_LOTE1 );
					
					//Actividad 5M1597: PH MONTERO
					if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_BLOQUE1 ) )
					{						
						escribeValorMaximoEnCampoTexto ( ID_CAMPO_LOTE1 );						
						escribeValorMaximoEnCampoTexto ( ID_CAMPO_PISO1 );						
						escribeValorMaximoEnCampoTexto ( ID_CAMPO_DEPARTAMENTO1 );				
					}
				}
				else
				{
					// LA GUARDIA
					if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_UNIDAD_VECINAL ) &&
						 this.driver.findElement ( By.id ( ID_CAMPO_UNIDAD_VECINAL ) ).isDisplayed ( ) )
					{
						escribeValorMaximoEnCampoTexto ( ID_CAMPO_UNIDAD_VECINAL );
					}
					else
					{
						if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_DISTRITO ) )
						{   
							if ( area.isEmpty ( ) )
							{
								datoArea = this.driver.findElement ( By.xpath ( PATH_DATO_AREA ) ).getText ( );
							}
							else
							{
								datoArea = area;
							}
							
							if ( this.municipio.equalsIgnoreCase ( Constants.MUNICIPIO_SACABA ) )
							{
								distrito = obtieneDistritoSacaba ( datoArea );
							}
							else
							{
								longitudMaxima = Integer.parseInt ( this.driver.findElement ( By.id ( ID_CAMPO_DISTRITO ) ).getAttribute ( "maxlength" ) );
								distrito       = ComponentCommon.getNroAleatorio ( longitudMaxima );
							}					
							
							this.driver.findElement ( By.id ( ID_CAMPO_DISTRITO ) ).clear ( );
							this.driver.findElement ( By.id ( ID_CAMPO_DISTRITO ) ).sendKeys ( distrito );
						}
					}
					
					escribeValorMaximoEnCampoTexto ( ID_CAMPO_MANZANO );	
					escribeValorMaximoEnCampoTexto ( ID_CAMPO_LOTE2 );					
					
					if ( elementoWebEstaPresente( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_SUBLOTE ) &&
						 this.driver.findElement( By.id ( ID_CAMPO_SUBLOTE ) ).isDisplayed ( ) )
					{
						escribeValorMaximoEnCampoTexto ( ID_CAMPO_SUBLOTE );
					}
					
					// Si es PH
					if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_BLOQUE2 ) &&     
						 this.driver.findElement ( By.id ( ID_CAMPO_BLOQUE2 ) ).isEnabled ( ) && 
						 this.driver.findElement ( By.id ( ID_CAMPO_BLOQUE2 ) ).isDisplayed ( ) ) 
					{
						escribeValorMaximoEnCampoTexto ( ID_CAMPO_BLOQUE2 );				
					}
		
					if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_PISO2 ) &&    
					     this.driver.findElement ( By.id ( ID_CAMPO_PISO2 ) ).isEnabled ( ) &&
					     this.driver.findElement ( By.id ( ID_CAMPO_PISO2 ) ).isDisplayed ( ) ) 
					{	
						escribeValorMaximoEnCampoTexto ( ID_CAMPO_PISO2 );				
					}
					
					if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_DEPARTAMENTO2 ) &&    
						 this.driver.findElement ( By.id ( ID_CAMPO_DEPARTAMENTO2 ) ).isEnabled ( ) &&
					     this.driver.findElement ( By.id ( ID_CAMPO_DEPARTAMENTO2 ) ).isDisplayed ( ) ) 
					{		
						escribeValorMaximoEnCampoTexto ( ID_CAMPO_DEPARTAMENTO2 );	
					}
				}
			}		
			capturarPantalla ( );
			ComponentCommon.registrarEnLog ( "Datos Código Catastral: OK." );	
			this.driver.findElement ( By.id ( Constants.ID_NAME_BOTON_ACEPTAR ) ).click ( );			
		}
	}
	
	public String getMensajeValidaciones()
	{
		return this.driver.findElement(By.xpath(Constants.PATH_VALIDACIONES)).getText();
	}
	
	public void continuaFlujoOMuestraValidacion()
	{
		this.wait.until(ExpectedConditions.or(ExpectedConditions.alertIsPresent(),
                                              ExpectedConditions.visibilityOfElementLocated(By.xpath(Constants.PATH_TITULO_VISTA))));
		if(cuadroDialogoEstaPresente())
		{
			this.mensajeError.append(this.driver.switchTo().alert().getText());
			this.driver.switchTo().alert().accept();		
			throw new AssertionError(this.mensajeError.toString());
		}
	}
	
	/**
	 * Se modificó para que en caso de error del aplicativo, éste se despliegue en consola y en el log, además de la descripción 
	 * del error, recuperado desde Base de Datos.
	 * @param excepcion
	 * ------------------------------------------------------------------------------------------------------------------------------
	 * Se factorizó código, llevando las instrucciones para el tratamiento del error del aplicativo a una función, ya que está puede
	 * ser llamada desde otros lugares
	 */
	public void procesarExcepcionInmuebles(Exception excepcion)
	{
		boolean excepcionDesplegada = false;
		
		try
		{
			if(cuadroDialogoEstaPresente())
			{
				this.driver.switchTo().alert().accept();
			}	

			ComponentCommon.procesarExcepcion ( excepcion );
			excepcionDesplegada = true;
			ComponentCommon.registrarEnLog ( "Se continuará con el proceso de automatización, de existir más datos ..." );	
			
			if(elementoWebEstaPresente(Constants.TIPO_LOCALIZADOR_CSS_SELECTOR, Constants.SELECTOR_CSS_CODIGO_ERROR))
			{
				ComponentCommon.registrarEnLog ( procesarErrorAplicativo ( ) );
			}
			
			if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_XPATH, Constants.PATH_ERROR_404 ) &&
			     this.driver.findElement ( By.xpath ( Constants.PATH_ERROR_404 ) ).getText ( ).contains ( "Error 404--Not Found" ) );
			{
				ComponentCommon.registrarEnLog ( this.driver.findElement ( By.xpath ( Constants.PATH_ERROR_404 ) ).getText ( ) );
			}			
			capturarPantalla ( );
		}
		catch ( WebDriverException driverExcepcion )
		{	
			ComponentCommon.registrarEnLog ( "Excepción Web Driver: ..." );
			
			if ( !excepcionDesplegada )
			{
				ComponentCommon.procesarExcepcion ( excepcion );
			}
		}
	}	
	
	/**
	 * Retorna la abreviación de un municipio, utilizada en el sufijo de usuarios.
	 * param municipio
	 * @return Abreviatura de un municipio.
	 */
	public String getAbreviacionAlcaldia ( String municipio )
	{
		switch ( municipio )
		{
			case "ACHOCALLA":       return "ACH"; 
			case "CARANAVI":        return "CRV";
			case "COBIJA":          return "COB"; 
			case "COCHABAMBA":      return "CBA"; 
			case "CUATRO CAÑADAS":  return "CCA"; 
			case "EL ALTO":         return "EAL"; 
			case "LA GUARDIA":      return "LGU"; 
			case "LA PAZ":          return "LPZ"; 
			case "LLALLAGUA":       return "LLA"; 
			case "MECAPACA":        return "MEC"; 
			case "MONTERO":         return "MON"; 
			case "ORURO":           return "ORU"; 
			case "PORTACHUELO":     return "PCH"; 
			case "POTOSI":          return "PTS"; 
			case "PUCARANI":        return "PUC"; 
			case "PUERTO QUIJARRO": return "PQO"; 
			case "QUILLACOLLO":     return "QUI";
			case "SABAYA":          return "SAB";
			case "SACABA":          return "SCB"; 
			case "SANTA CRUZ":      return "SCZ";
			case "SORATA":			return "SOR";
			case "SUCRE":           return "SRE";
			case "TARIJA":          return "TAR";
			case "TRINIDAD":        return "TRI";
			case "VIACHA":          return "VIA";
			case "VILLA MONTES":    return "VMS";
			case "VILLA TUNARI":    return "TUN";
			case "WARNES":          return "WAR";
			case "YACUIBA":         return "YAC";
			default:			    return "NNN";
		}		
	}
	
	public boolean elementoWebEstaPresente(String tipoLocalizador, String localizador)
	{
		boolean estaPresente = false;
		
		switch(tipoLocalizador)
		{
			case Constants.TIPO_LOCALIZADOR_ID	          : estaPresente = (this.driver.findElements(By.id(localizador)).size() > 0)? true: false; break;
			case Constants.TIPO_LOCALIZADOR_NAME         : estaPresente = (this.driver.findElements(By.name(localizador)).size() > 0)? true: false; break;
			case Constants.TIPO_LOCALIZADOR_XPATH        : estaPresente = (this.driver.findElements(By.xpath(localizador)).size() > 0)? true: false; break;
			case Constants.TIPO_LOCALIZADOR_LINK_TEXT    : estaPresente = (this.driver.findElements(By.linkText(localizador)).size() > 0)? true: false; break;
			case Constants.TIPO_LOCALIZADOR_CSS_SELECTOR : estaPresente = (this.driver.findElements(By.cssSelector(localizador)).size() > 0)? true: false; break;
		}
		return estaPresente;
	}
	
	/**
	 * Se agregó el estado EN TRANSFERENCIA para propiedades en con este trámite.
	 * @param accion
	 */
	public void seleccionAccion(String accion)
	{
		List<WebElement> filas;
		List <WebElement> columnas;
		int propiedad_i      = 1; 
		int propiedad_activa_i = 1;
		int pagina = 1;
		String valorAccion=accion;		
		
		do
		{	wait.until(ExpectedConditions.visibilityOfElementLocated(By.className("etiqueta")));
			filas = driver.findElements(By.xpath("/html/body/div[2]/form/table/tbody/tr[3]/td/table/tbody/tr/td/table/tbody/tr"));		
			columnas = filas.get(propiedad_i).findElements(By.xpath("td"));
			
				ComponentCommon.registrarEnLog(" Evaluando Acción -> ".concat(valorAccion).concat(": ").concat(columnas.get(columnas.size() - 4).getText().replaceAll("\n", " ")));
				if(columnas.get(columnas.size() - 2).getText().equals("ACTIVO") || 
				   columnas.get(columnas.size() - 2).getText().equals("EN TRANSFERENCIA")) //ATINM-97 (AP-057/2018)
				{
					if(propiedad_activa_i == Integer.parseInt(accion))
					{
						capturarPantalla();
						columnas.get(columnas.size() - 1).findElement(By.linkText("Seleccionar")).click();
						break;
					}
					else
					{
						propiedad_activa_i ++;
					}
					
				}
			
			if(propiedad_i == filas.size() -1)
			{
				try
				{
					this.driver.findElement(By.linkText(String.valueOf(++ pagina))).click();
					propiedad_i = 1;
					accion = String.valueOf(Integer.parseInt(accion)- 20);
				}
				catch(NoSuchElementException noEncuentraMasPaginasExcepcion)
				{
					break;
				}
			}
			else
			{
				propiedad_i ++;			
			}
		}while(propiedad_i < filas.size());		
	}
	
	/**
	 * getNumeroAccionesActivas(): Función que devuelve el número de propiedades en estado ACTIVO o EN TRANSFERENCIA.
	 */
	public int getNumeroAccionesActivas()
	{                                       
		final String CLASE_ETIQUETA                    = "etiqueta";
		final String PATH_FILAS_ACCIONES               = "//*[@id='frmBuscar']/table/tbody/tr[3]/td/table/tbody/tr/td/table/tbody/tr";
		final String ESTADO_ACTIVO_PROPIEDAD           = "ACTIVO";
		final String ESTADO_EN_TRANSFERENCIA_PROPIEDAD = "EN TRANSFERENCIA";
		final String ENLACE_PAGINA_1                   = "1"; 
	
		int               fila_i         = 1; 
		int               pagina         = 1;	
		int               numeroAcciones = 0;
		List<WebElement>  filas          = null;
		List <WebElement> columnas       = null;
		
		do
		{	this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.className(CLASE_ETIQUETA)));
			filas    = this.driver.findElements(By.xpath(PATH_FILAS_ACCIONES));		
			columnas = filas.get(fila_i).findElements(By.xpath(ConstantsInmuebles.PATH_COLUMNA));
			if(columnas.get(columnas.size() - 2).getText().equals(ESTADO_ACTIVO_PROPIEDAD) ||
			   columnas.get(columnas.size() - 2).getText().equals(ESTADO_EN_TRANSFERENCIA_PROPIEDAD))
			{
				numeroAcciones ++;
			}
			if(fila_i == filas.size() - 1)
			{
				try
				{
					this.driver.findElement(By.linkText(String.valueOf(++ pagina))).click();
					fila_i = 1;
				}
				catch(NoSuchElementException noEncuentraMasPaginasExcepcion)
				{
					break;
				}
			}
			else
			{
				fila_i ++;			
			}
		}while(fila_i < filas.size());
		if(pagina > 2)
		{
			this.driver.findElement(By.linkText(ENLACE_PAGINA_1)).click();
		}
		return numeroAcciones;
	}
	
	public String getTituloVista ( )
	{
		final String NOMBRE_VISTA_GENERICO = "SIN_TITULO";
		
		String nombreVista = "";
		
		if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_XPATH, Constants.PATH_TITULO_VISTA ) )
		{
			nombreVista = this.driver.findElement ( By.xpath(Constants.PATH_TITULO_VISTA)).getText();
		}
		else if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_XPATH, Constants.PATH_TITULO_VISTA.replaceAll(ConstantsInmuebles.PATH_FORMULARIO, "") ) )
		{
			nombreVista = this.driver.findElement(By.xpath(Constants.PATH_TITULO_VISTA.replaceAll(ConstantsInmuebles.PATH_FORMULARIO, ""))).getText();
		}
		else if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_XPATH, Constants.PATH_VISTA_DATOS_COD_CATASTRAL ) )
		{
			nombreVista = this.driver.findElement ( By.xpath( Constants.PATH_VISTA_DATOS_COD_CATASTRAL ) ).getText();
		}
		else
		{
			nombreVista = NOMBRE_VISTA_GENERICO;
		}
		
		return nombreVista.replaceAll("\n"," ");
	}
	
	/**
	 * Método ubicacionInmueble(): Realiza el flujo de la vista Ubicación Inmueble.
	 * Se agregaron condiciones para verificar que si el combo box está habilitado y no tiene un valor seleccionado, entonces 
	 * se selecciona una opción. Se cambiaron nombres de constantes a mayúsculas.
	 * ----------------------------------------------------------------------------------------------------------------------
	 * Se modificó para condiderar el datos domicilio georeferenciado.
	 */
	public void ubicacionInmueble ( )
	{
		final String ID_COMBO_NIVEL_0                = "ecbNivel_0";
		final String ID_COMBO_TIPO_LUGAR             = "cbxTipoLugar"; 
		final String ID_COMBO_NIVEL_1                = "ecbNivel_1";
		final String ID_COMBO_NIVEL_2                = "ecbNivel_2";
		final String ID_COMBO_NIVEL_3                = "ecbNivel_3";
		final String ID_COMBO_LUGAR                  = "cbxLugar";
		final String ID_CHECK_SIN_NUMERO             = "chksinNumero";
		final String PATH_DIRECCION_DESCRIPTIVA      = "//*[@id='frmRegistrar']/table/tbody/tr[4]/td/table/tbody/tr";
		final String ID_AREA_TEXTO_DIRECCION         = "txaDireccionDescriptiva";
		final String ID_CAMPO_EDIFICIO               = "txtNombreedificio";
		final String ID_CAMPO_PISO                   = "txtPiso";
		final String ID_COMBO_UNIDAD_FUNCIONAL       = "cbxTipoUnidadFuncional";
		final String ID_CAMPO_NRO_UNIDAD_FUNCIONAL   = "txtNroUnidadFuncional";
		final String ID_CAMPO_LUZ                    = "txtCodigoCuentaLuz";
		final String ID_CAMPO_AGUA                   = "txtCodigoCuentaAgua";
		final String ID_CAMPO_GAS                    = "txtCodCuentaGasDomiciliario";
		final String ID_CAMPO_CODIGO_MATRIZ          = "txtCodigoMatriz";
		final String ID_CAMPO_MEDIDOR_LUZ            = "txtNumeroMedidorLuz";
		final String ID_BOTON_GRABAR                 = "btnGrabar";
		final String ID_DOMICILIO_GEOREFERENCIADO_NO = "rbtDomicilioGeorefNo";
		
		int                 indiceNivel0        = 1;
		List < WebElement > filasDatosUbicacion = null;
		
		esperarVista ( "UBICACION INMUEBLE" );
		ComponentCommon.registrarEnLog ( "Ubicación Inmueble: ..." );	
		
		try
		{
			try
			{
				if(this.driver.findElement(By.id(ID_COMBO_NIVEL_0)).isEnabled() &&
				   new Select(this.driver.findElement(By.id(ID_COMBO_NIVEL_0))).getFirstSelectedOption().getText().isEmpty())
				{
					new Select(this.driver.findElement(By.id(ID_COMBO_NIVEL_0))).selectByIndex(0); 
				}
			}
			catch(UnexpectedTagNameException nivel0NoEsComboExcepcion) { }
			
			this.wait.until(ExpectedConditions.or(ExpectedConditions.alertIsPresent(),
                                                  ExpectedConditions.visibilityOfElementLocated(By.id(ID_COMBO_TIPO_LUGAR))));		
			while(cuadroDialogoEstaPresente())
			{
				this.driver.switchTo().alert().accept();
				if(this.driver.findElement(By.id(ID_COMBO_NIVEL_0)).isEnabled() &&
				   new Select(this.driver.findElement(By.id(ID_COMBO_NIVEL_0))).getFirstSelectedOption().getText().isEmpty())
				{
					new Select(this.driver.findElement(By.id(ID_COMBO_NIVEL_0))).selectByIndex(indiceNivel0 ++);
					this.wait.until(ExpectedConditions.or(ExpectedConditions.alertIsPresent(),
				                                          ExpectedConditions.visibilityOfElementLocated(By.id(ID_COMBO_TIPO_LUGAR)))); 				
				}				
			}			
			try
			{
				if(this.driver.findElement(By.id(ID_COMBO_NIVEL_1)).isEnabled() &&
				   new Select(this.driver.findElement(By.id(ID_COMBO_NIVEL_1))).getFirstSelectedOption().getText().isEmpty())
				{
					new Select(this.driver.findElement(By.id(ID_COMBO_NIVEL_1))).selectByIndex(0);
				}
			}
			catch(NoSuchElementException | UnexpectedTagNameException nivel1NoEsComboExcepcion) { }
			
			try
			{
				if(this.driver.findElement(By.id(ID_COMBO_NIVEL_2)).isEnabled() && 
				   new Select(this.driver.findElement(By.id(ID_COMBO_NIVEL_2))).getFirstSelectedOption().getText().isEmpty())
				{
					new Select(this.driver.findElement(By.id(ID_COMBO_NIVEL_2))).selectByIndex(0);
				}
			}
			catch(NoSuchElementException | UnexpectedTagNameException noEncuentraNivel2ONoEsComboExcepcion) { }
			
			try
			{
				if(this.driver.findElement(By.id(ID_COMBO_NIVEL_3)).isEnabled() &&
				   new Select(this.driver.findElement(By.id(ID_COMBO_NIVEL_3))).getFirstSelectedOption().getText().isEmpty())
				{
					new Select(this.driver.findElement(By.id(ID_COMBO_NIVEL_3))).selectByIndex(0); 
				}
			}
			catch(NoSuchElementException noEncuentraNivel3Excepcion) { }
		}
		catch(NoSuchElementException noEncuentraNivel0Excepcion)
		{
			try
			{
				if(this.driver.findElement(By.id(ID_COMBO_NIVEL_1)).isEnabled() &&
				   new Select(this.driver.findElement(By.id(ID_COMBO_NIVEL_1))).getFirstSelectedOption().getText().isEmpty())
				{
					new Select(this.driver.findElement(By.id(ID_COMBO_NIVEL_1))).selectByIndex(0);
				}
			}
			catch(NoSuchElementException noEncuentraNivel1Excepcion) { }
		}		
		try
		{
			if(this.driver.findElement(By.id(ID_COMBO_TIPO_LUGAR)).isEnabled() &&
			   new Select(this.driver.findElement(By.id(ID_COMBO_TIPO_LUGAR))).getFirstSelectedOption().getText().isEmpty())
			{
				new Select(this.driver.findElement(By.id(ID_COMBO_TIPO_LUGAR))).selectByIndex(0);
			}
			if(this.driver.findElement(By.id(ID_COMBO_LUGAR)).isEnabled() &&
			   new Select(this.driver.findElement(By.id(ID_COMBO_LUGAR))).getFirstSelectedOption().getText().isEmpty())
			{
				new Select(this.driver.findElement(By.id(ID_COMBO_LUGAR))).selectByIndex(0);	
			}
		}
		catch(NoSuchElementException noEncuentraElementosExcepcion) { }
	    if(this.driver.findElement(By.id(ID_CHECK_SIN_NUMERO)).isEnabled() && !this.driver.findElement(By.id(ID_CHECK_SIN_NUMERO)).isSelected())
		{
	    	this.driver.findElement(By.id(ID_CHECK_SIN_NUMERO)).click();
		}
		
		filasDatosUbicacion = this.driver.findElements(By.xpath(PATH_DIRECCION_DESCRIPTIVA));		
		if(this.driver.findElement(By.xpath(PATH_DIRECCION_DESCRIPTIVA.concat("[").concat(String.valueOf(filasDatosUbicacion.size())).concat("]/").concat(ConstantsInmuebles.PATH_COLUMNA_TITULO))).getText().startsWith("*"))
		{
			this.driver.findElement(By.id(ID_AREA_TEXTO_DIRECCION)).sendKeys(ConstantsInmuebles.CONTENIDO_AREA_TEXTO);
		}
		
		try //PROPIEDAD HORIZONTAL
		{
			this.driver.findElement(By.id(ID_CAMPO_EDIFICIO)).sendKeys(ConstantsInmuebles.NOMBRE_EDIFICIO);
			this.driver.findElement(By.id(ID_CAMPO_PISO)).sendKeys(ComponentCommon.getNroAleatorio(Integer.parseInt(this.driver.findElement(By.id(ID_CAMPO_PISO)).getAttribute(ConstantsInmuebles.ATRIBUTO_LONGITUD_MAXIMA))));
			new Select(this.driver.findElement(By.id(ID_COMBO_UNIDAD_FUNCIONAL))).selectByIndex(1);
			this.driver.findElement(By.id(ID_CAMPO_NRO_UNIDAD_FUNCIONAL)).sendKeys(ComponentCommon.getNroAleatorio(Integer.parseInt(this.driver.findElement(By.id(ID_CAMPO_NRO_UNIDAD_FUNCIONAL)).getAttribute(ConstantsInmuebles.ATRIBUTO_LONGITUD_MAXIMA))));
		}
		catch(NoSuchElementException noEsPHExcepcion) { }
		
		try //SANTA CRUZ
		{
			this.driver.findElement(By.id(ID_CAMPO_LUZ)).sendKeys(ComponentCommon.getNroAleatorio(Integer.parseInt(this.driver.findElement(By.id(ID_CAMPO_LUZ)).getAttribute(ConstantsInmuebles.ATRIBUTO_LONGITUD_MAXIMA))));
			this.driver.findElement(By.id(ID_CAMPO_AGUA)).sendKeys(ComponentCommon.getNroAleatorio(Integer.parseInt(this.driver.findElement(By.id(ID_CAMPO_AGUA)).getAttribute(ConstantsInmuebles.ATRIBUTO_LONGITUD_MAXIMA))));
			this.driver.findElement(By.id(ID_CAMPO_GAS)).sendKeys(ComponentCommon.getNroAleatorio(Integer.parseInt(this.driver.findElement(By.id(ID_CAMPO_GAS)).getAttribute(ConstantsInmuebles.ATRIBUTO_LONGITUD_MAXIMA))));
		}
		catch(NoSuchElementException noEncuentraServiciosExcepcion) { }
		
		if(elementoWebEstaPresente(Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_CODIGO_MATRIZ))
		{
			moverScroll(this.driver.findElement(By.id(ID_CAMPO_CODIGO_MATRIZ)));
			this.driver.findElement(By.id(ID_CAMPO_CODIGO_MATRIZ)).sendKeys(ComponentCommon.getNroAleatorio(30));
		}
		
		if(elementoWebEstaPresente(Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_MEDIDOR_LUZ))
		{
			moverScroll(this.driver.findElement(By.id(ID_CAMPO_MEDIDOR_LUZ)));
			this.driver.findElement(By.id(ID_CAMPO_MEDIDOR_LUZ)).sendKeys(ComponentCommon.getNroAleatorio(10));
		}
		
		if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_DOMICILIO_GEOREFERENCIADO_NO ) )
		{
			moverScroll(this.driver.findElement ( By.id ( ID_DOMICILIO_GEOREFERENCIADO_NO ) ));
			this.driver.findElement ( By.id ( ID_DOMICILIO_GEOREFERENCIADO_NO ) ).click ( );
		}
		
		capturarPantalla ( );
		moverScrollYAceptar ( ID_BOTON_GRABAR, Constants.TIPO_LOCALIZADOR_ID );
		ComponentCommon.registrarEnLog ( "Ubicación Inmueble: OK." );		
	}
	
	/**
	 * Método datosConstruccionesPH(): Realiza el registro de construcción principal y si se tiene, la construcción de área común para Propiedad
	 * Horizontal.
	 */
	public void datosConstruccionesPH(String anioInicioImpuesto, boolean conAreaComun, String zonaTributaria)
	{
		final String ID_ENLACE_ADICIONAR_CONSTRUCCION = "lnkAddConstruccion";
		final String ID_CAMPO_GESTION                 = "txtAnioInicioImp";
		final String ID_COMBO_TIPO_CONSTRUCCION       = "{actionForm.tipoConstruccion}";
		final String ID_CAMPO_ANIO_CONSTRUCCION       = "txtAnioConstruccion";
		final String ID_CAMPO_SUPERFICIE              = "txtSuperficie";
		final String ID_COMBO_ZONA_TRIBUTARIA         = "{actionForm.zonaTributaria}";
		final String ID_COMBO_USO_CONSTRUCCION        = "{actionForm.usoConstruccion}";
		final String ID_ENLACE_ADICIONAR_AREA_COMUN   = "lnkAddAreaComun";
		final String ATRIBUTO_TITULO                  = "title";
		final String VALOR_ATRIBUTO_TITULO            = "Tipo";
		final String VALOR_ATRIBUTO_DESHABILITADO     = "true";
		final String ID_COMBO_TIPO_AREA_COMUN         = "{actionForm.tipoAreaComun}";
		
		this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(ID_ENLACE_ADICIONAR_CONSTRUCCION))).click();
		ComponentCommon.registrarEnLog("Datos Construcciones PH: ...");
		this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(ID_CAMPO_GESTION))).sendKeys(anioInicioImpuesto);		
		this.wait.until(ExpectedConditions.stalenessOf(this.driver.findElement(By.id(ID_COMBO_TIPO_CONSTRUCCION))));		
		new Select(driver.findElement(By.id(ID_COMBO_TIPO_CONSTRUCCION))).selectByIndex(1);		
		this.driver.findElement(By.id(ID_CAMPO_ANIO_CONSTRUCCION)).sendKeys(anioInicioImpuesto);
		this.driver.findElement(By.id(ID_CAMPO_SUPERFICIE)).sendKeys(ConstantsInmuebles.SUPERFICIE_CONSTRUCCION_PROPIEDAD_HORIZONTAL);
		
		if(elementoWebEstaPresente(Constants.TIPO_LOCALIZADOR_ID, ID_COMBO_ZONA_TRIBUTARIA))
		{
			this.wait.until(ExpectedConditions.numberOfElementsToBeMoreThan(By.id(ID_COMBO_ZONA_TRIBUTARIA), 0));
			try
			{
				if(zonaTributaria == null)
				{
					new Select(this.driver.findElement(By.id(ID_COMBO_ZONA_TRIBUTARIA))).selectByIndex(1);
				}
				else
				{
					new Select(this.driver.findElement(By.id(ID_COMBO_ZONA_TRIBUTARIA))).selectByVisibleText(zonaTributaria);
				}
			}
			catch(UnexpectedTagNameException ZonaTributariaNoEsComboExcepcion) { }
		}	
		try
		{
			new Select(this.driver.findElement(By.id(ID_COMBO_USO_CONSTRUCCION))).selectByIndex(1);
		}
		catch(NoSuchElementException noEncuentraUsoConstruccionExcepcion) { }		
		this.driver.findElement(By.id(Constants.ID_NAME_BOTON_ACEPTAR)).click();		
		this.wait.until(ExpectedConditions.textToBe(By.xpath(getPathTituloVista(ConstantsInmuebles.NOMBRE_FORM_VISTA_DATOS_CONSTRUCCIONES)), ConstantsInmuebles.VISTA_DATOS_CONSTRUCCIONES));
		
		if(conAreaComun) //Para ÁREAS COMUNES
		{
			try 
			{
				this.driver.findElement(By.id(ID_ENLACE_ADICIONAR_AREA_COMUN)).click();			
				this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(ID_CAMPO_SUPERFICIE))).sendKeys(ConstantsInmuebles.SUPERFICIE_AREA_COMUN_PROPIEDAD_HORIZONTAL);
				
				try
				{
					this.driver.findElement(By.id(ID_CAMPO_GESTION)).sendKeys(anioInicioImpuesto);
				}
				catch(NoSuchElementException noEncuentraCampoAnioInicioImpuestoExcepcion) { }
				catch(ElementNotInteractableException noEditableCampoAnioInicioImpuestoExcepcion) { }	
				try
				{
					this.wait.until(ExpectedConditions.or(ExpectedConditions.attributeContains(By.id(ID_COMBO_TIPO_CONSTRUCCION), ATRIBUTO_TITULO, VALOR_ATRIBUTO_TITULO),
							                              ExpectedConditions.attributeContains(By.id(ID_COMBO_TIPO_CONSTRUCCION), ConstantsInmuebles.ATRIBUTO_DESHABILITADO, VALOR_ATRIBUTO_DESHABILITADO),
							                              ExpectedConditions.stalenessOf(this.driver.findElement(By.id(ID_COMBO_TIPO_CONSTRUCCION)))));
					try
					{
						new Select(this.driver.findElement(By.id(ID_COMBO_TIPO_CONSTRUCCION))).selectByIndex(1);
					}
					catch(StaleElementReferenceException | InvalidElementStateException comboRefrescadoODeshabilitadoExcepcion) { } //El combo ya tiene un valor (Cobija) o está deshabilitado.
				}
				catch(ElementNotInteractableException noEsSeleccionableComboTipoConstruccionExcepcion) { }			
				try
				{
					this.driver.findElement(By.id(ID_CAMPO_ANIO_CONSTRUCCION)).sendKeys(anioInicioImpuesto);
				}
				catch(NoSuchElementException noEncuentraCampoAnioConstruccionExcepcion) { }
				catch(ElementNotInteractableException noEditableCampoAnioInicioImpuestoExcepcion) { }
				try
				{
					new Select(this.driver.findElement(By.id(ID_COMBO_TIPO_AREA_COMUN))).selectByIndex(1);
				}
				catch(NoSuchElementException | ElementNotInteractableException noEsSeleccionableComboTipoAreaComunExcepion) { }			
				this.driver.findElement(By.id(Constants.ID_NAME_BOTON_ACEPTAR)).click();
			}
			catch(NoSuchElementException noEncuentraDatosAreaComunExcepcion) { }
		}
		capturarPantalla();
		this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(Constants.ID_NAME_BOTON_ACEPTAR))).click();
		ComponentCommon.registrarEnLog("Datos Construcciones PH: OK.");		
		this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(Constants.PATH_TITULO_VISTA))); 
	}
	
	/**
	 * Método datosTerreno(): Realiza el flujo de la vista Datos Terreno.
	 */
	public void datosTerreno(String anioInicioImpuesto, boolean conConstruccionAdicional, int nroConstruccionesAdicionales, boolean PAConConstruccion, int nroConstruccionesPA, String zonaTributaria, String materialVia)
	{	
		final String ID_CAMPO_GESTION               = "txtGestion";
		final String ID_CAMPO_SUPERFICIE            = "txtSuperficie";
		final String ID_COMBO_ZONA_TRIBUTARIA       = "cbxZonaTributaria";
		final String ID_RADIO_M2                    = "rbtm2";
		final String ID_COMBO_INCLINACION           = "cbxInclinacion";
		final String ID_MATERIAL_VIA                = "cbxMaterialVia";
		final String ID_CAMPO_ZONA_TRIBUTARIA       = "txtZonaTributaria";
		final String ID_COMBO_UBICACION             = "cbxUbicacion";
		final String OPCION_UBICACION_ESQUINA       = "ESQUINA";
		final String ID_CHECK_SERVICIOS             = "chkTodos";
		final String ID_BOTON_GRABAR                = "btnGrabar";
		final String MENSAJE_CONSTRUCCION_ADICIONAL = "¿Desea registrar Construcción Adicional?";
		final String MENSAJE_CONSTRUCCION_PA        = "¿Desea registrar Construcción?";
		final String ID_DIV_ZONA_TRIBUTARIA         = "divZonaTributaria";		
		final String ID_COMBO_INCLINACION_TERRENO   = "cbxInclinacionTerreno";
		
		String mensajeAlertaConstrucciones = "";
		
		if(anioInicioImpuesto != null)
	    {
			this.driver.findElement(By.id(ID_CAMPO_GESTION)).sendKeys(anioInicioImpuesto);
	    }
	    ComponentCommon.registrarEnLog("Datos Terreno: ...");
	    if(this.driver.findElement(By.id(ID_CAMPO_SUPERFICIE)).getAttribute(ConstantsInmuebles.ATRIBUTO_CSS_CLASE).isEmpty())
	    {
	    	this.driver.findElement(By.id(ID_CAMPO_SUPERFICIE)).clear();
	    	this.driver.findElement(By.id(ID_CAMPO_SUPERFICIE)).sendKeys(ConstantsInmuebles.SUPERFICIE_TERRENO);	    
	    }
	    try
	    {	    		
	    	try
	    	{
	    		this.wait.until(ExpectedConditions.or(ExpectedConditions.stalenessOf(this.driver.findElement(By.id(ID_COMBO_ZONA_TRIBUTARIA))),
	                                                 (ExpectedCondition<Boolean>) condicionEspera -> new Select(this.driver.findElement(By.id(ID_COMBO_ZONA_TRIBUTARIA))).getOptions().size() > 1));
	    	}
	    	catch(StaleElementReferenceException comboTipoConstruccionRefrescadoExcepcion)
	    	{
	    		this.wait.until(ExpectedConditions.or(ExpectedConditions.stalenessOf(this.driver.findElement(By.id(ID_COMBO_ZONA_TRIBUTARIA))),
	                                                 (ExpectedCondition<Boolean>) condicionEspera -> new Select(this.driver.findElement(By.id(ID_COMBO_ZONA_TRIBUTARIA))).getOptions().size() > 1));
	    	} 		
	    	if(this.driver.findElement(By.id(ID_COMBO_ZONA_TRIBUTARIA)).getTagName().equals(ConstantsInmuebles.ETIQUETA_COMBO))
	    	{
	    		if(zonaTributaria == null)
	    		{
	    			new Select(this.driver.findElement(By.id(ID_COMBO_ZONA_TRIBUTARIA))).selectByIndex(ComponentCommon.getNroAleatorio(1, new Select(this.driver.findElement(By.id(ID_COMBO_ZONA_TRIBUTARIA))).getOptions().size() - 1));
	    		}
	    		else
	    		{
	    			new Select(this.driver.findElement(By.id(ID_COMBO_ZONA_TRIBUTARIA))).selectByVisibleText(zonaTributaria);
	    		}
	    	}
	    } 
		catch(NoSuchElementException noEncuentraZonaTributariaExcepcion)
		{
			if(elementoWebEstaPresente(Constants.TIPO_LOCALIZADOR_ID, ID_DIV_ZONA_TRIBUTARIA))
			{
				this.mensajeError.append("(BLOQUEANTE): ").append(this.driver.findElement(By.id(ID_DIV_ZONA_TRIBUTARIA)).findElement(By.tagName(ConstantsInmuebles.ETIQUETA_SPAN)).getText());
				throw new AssertionError(this.mensajeError.toString());
			}
		}
	    catch(TimeoutException EsperaZonaTributariaTiempoExcedidoExcepcion)
	    {
	    	this.driver.findElement(By.linkText(Constants.ENLACE_ANTERIOR)).click();
	    	this.wait.until(ExpectedConditions.elementToBeClickable(By.id(ID_BOTON_GRABAR))).click();
	    	this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(getPathTituloVista(ConstantsInmuebles.NOMBRE_FORM_VISTA_DATOS_TERRENO))));
	    	datosTerreno(anioInicioImpuesto, conConstruccionAdicional, nroConstruccionesAdicionales, PAConConstruccion, nroConstruccionesPA, zonaTributaria, materialVia);
	    }
	    try // RURALES
	    {
	    	this.driver.findElement(By.id(ID_RADIO_M2)).click();
	    }
	    catch(NoSuchElementException noEncuentraRadioMts2Excepcion) { }
	    
	   	try
	    {
	   		new Select(this.driver.findElement(By.id(ID_COMBO_INCLINACION))).selectByVisibleText(ConstantsInmuebles.INCLINACION_PLANO);    		
	    }
	   	catch(UnexpectedTagNameException inclinacionNoEsComboExcepcion) { }

	   	try
	   	{
	   		while(true)
	   		{
	   			try
		   		{
		   			if(new Select(this.driver.findElement(By.id(ID_MATERIAL_VIA))).getOptions().size() == 1 &&
		   			   elementoWebEstaPresente(Constants.TIPO_LOCALIZADOR_ID, ID_COMBO_ZONA_TRIBUTARIA))
			   		{
			   			new Select(this.driver.findElement(By.id(ID_COMBO_ZONA_TRIBUTARIA))).selectByIndex(2);
			   		}
			   		else
			   		{
			   			if(materialVia == null)
			   			{
			   				new Select(this.driver.findElement(By.id(ID_MATERIAL_VIA))).selectByIndex(1); 
			   			}
			   			else
			   			{
			   				new Select(this.driver.findElement(By.id(ID_MATERIAL_VIA))).selectByVisibleText(materialVia);
			   			}
			   		}
		   			break;
		   		}
		   		catch(StaleElementReferenceException zonaTributariaRefrescadaExcepcion)	{ }
	   		}
	   	}
	   	catch(UnexpectedTagNameException materialViaNoEsComboExcepcion) { }
	   	catch(NoSuchElementException materialViaNoSeEncuentraExcepcion) 
	   	{
	   		if(elementoWebEstaPresente(Constants.TIPO_LOCALIZADOR_ID, ID_COMBO_ZONA_TRIBUTARIA))
	   		{
	   			this.wait.until(ExpectedConditions.or(ExpectedConditions.visibilityOfElementLocated(By.id(ID_CAMPO_ZONA_TRIBUTARIA)),
	   											      ExpectedConditions.visibilityOfElementLocated(By.id(ID_COMBO_ZONA_TRIBUTARIA))));
	   		}	   		
	   	}	   
	    try
	   	{
	    	new Select(this.driver.findElement(By.id(ID_COMBO_UBICACION))).selectByVisibleText(OPCION_UBICACION_ESQUINA);
	   	}
	    catch(NoSuchElementException noEncuentraComboUbicacionExcepcion) { }	
	    
	    if(elementoWebEstaPresente(Constants.TIPO_LOCALIZADOR_ID, ID_COMBO_INCLINACION_TERRENO))
	    {
	    	if(this.driver.findElement(By.id(ID_COMBO_INCLINACION_TERRENO)).getTagName().equals(ConstantsInmuebles.ETIQUETA_COMBO))
	    	{
	    		new Select(this.driver.findElement(By.id(ID_COMBO_INCLINACION_TERRENO))).selectByIndex(ComponentCommon.getNroAleatorio(1, 3));
	    	}
	    }
	    
	    this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(ID_CHECK_SERVICIOS)));
	    if(!this.driver.findElement(By.id(ID_CHECK_SERVICIOS)).isSelected())
	    {
	    	this.driver.findElement(By.id(ID_CHECK_SERVICIOS)).click();	   
	    }
	    capturarPantalla();
	    moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_ID);    
	    while(true)
	    {
	    	try
	    	{
	    		this.wait.until(ExpectedConditions.or(ExpectedConditions.alertIsPresent(),
                                                      ExpectedConditions.visibilityOfElementLocated(By.xpath(Constants.PATH_TITULO_VISTA))));
				if(cuadroDialogoEstaPresente())
				{
					mensajeAlertaConstrucciones = this.driver.switchTo().alert().getText();					
					if(mensajeAlertaConstrucciones.equalsIgnoreCase(MENSAJE_CONSTRUCCION_ADICIONAL) && conConstruccionAdicional)
					{
						ComponentCommon.registrarEnLog("Datos Terreno: OK.");						
						this.driver.switchTo().alert().accept();
						this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(getPathTituloVista(ConstantsInmuebles.NOMBRE_FORM_VISTA_DATOS_CONSTRUCCIONES))));
						construccionesAdicionales(nroConstruccionesAdicionales, anioInicioImpuesto);	
						moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_ID);
					}
					if(mensajeAlertaConstrucciones.equalsIgnoreCase(MENSAJE_CONSTRUCCION_PA) && PAConConstruccion)
					{
						ComponentCommon.registrarEnLog("Datos Terreno: OK.");						
						this.driver.switchTo().alert().accept();
						this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(getPathTituloVista(ConstantsInmuebles.NOMBRE_FORM_VISTA_DATOS_CONSTRUCCIONES))));
						detalleDatosConstruccionesVU(nroConstruccionesPA, anioInicioImpuesto, false, 0);
					}
					else	    		
					{
						this.driver.switchTo().alert().dismiss();
					}
				}
				else
				{
					ComponentCommon.registrarEnLog("Datos Terreno: OK.");
					break;
				}
	    	}
	    	catch(WebDriverException webDriverExcepcion) { }
	    }	
	}
	
	/**
	 * Método construccionesAdicionales(): Registra construcciones adicionales (para Cochabamba), controlado por Constantes.
	 */
	public void construccionesAdicionales(int nroConstruccionesAdicionales, String anioInicioImpuesto)
	{
		final String enlaceAdicionarConstruccionAdicional        = "lnkAddConstAdd";
		final String idCampoGestionConstruccionAdicional         = "txtAnoInicioImp";		
		final String idComboTipoConstruccionAdicional            = "{actionForm.tipoConstruccion}";
		final String idCampoAnioConstruccionAdicional            = "txtAnoConstruccion";
		final String idCampoSuperficieConstruccionAdicional      = "txtSuperficie";
		final String idComboTipoEdificacionConstruccionAdicional = "{actionForm.tipoEdificacion}";
		final String idComboPuntajeConstruccionAdicional         = "{actionForm.puntaje}";
		
		for(int construccionAdicional_i = 0; construccionAdicional_i < nroConstruccionesAdicionales; construccionAdicional_i ++)
		{
			moverScroll(this.driver.findElement(By.id(enlaceAdicionarConstruccionAdicional)));
			this.driver.findElement(By.id(enlaceAdicionarConstruccionAdicional)).click();
			ComponentCommon.registrarEnLog(" Construcción Adicional [".concat(String.valueOf(construccionAdicional_i + 1)).concat("]: ..."));
			if(construccionAdicional_i == 0)
			{
				this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(idCampoGestionConstruccionAdicional))).sendKeys(anioInicioImpuesto);
				this.wait.until(ExpectedConditions.stalenessOf(this.driver.findElement(By.id(idComboTipoConstruccionAdicional))));
			}			
			this.driver.findElement(By.id(idCampoAnioConstruccionAdicional)).sendKeys(anioInicioImpuesto);
			this.driver.findElement(By.id(idCampoSuperficieConstruccionAdicional)).sendKeys(ConstantsInmuebles.SUPERFICIE_CONSTRUCCION_ADICIONAL);		
			new Select(this.driver.findElement(By.id(idComboTipoConstruccionAdicional))).selectByIndex(1);
			new Select(this.driver.findElement(By.id(idComboTipoEdificacionConstruccionAdicional))).selectByIndex(1);
			new Select(this.driver.findElement(By.id(idComboPuntajeConstruccionAdicional))).selectByIndex(1);
			moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_ID);
			ComponentCommon.registrarEnLog(" Construcción Adicional [".concat(String.valueOf(construccionAdicional_i + 1)).concat("]: OK"));
		}
		if(nroConstruccionesAdicionales > 0)
		{
			moverScroll(this.driver.findElement(By.id(Constants.ID_NAME_BOTON_ACEPTAR)));
			this.wait.until(ExpectedConditions.elementToBeClickable(By.id(Constants.ID_NAME_BOTON_ACEPTAR)));
		}
	}
	
	/**
	 * Método detalleDatosConstruccionesVU(): Realiza el registro de construcciones para Vivienda Unifamiliar, iterando por el número de 
	 * construcciones especificadas y si es el caso, también con construcciones adicionales (Cochabamba).
	 */
	public void detalleDatosConstruccionesVU(int nroConstrucciones, String anioInicioImpuesto, boolean conConstruccionAdicional, int nroConstruccionesAdicionales)
	{		
		ComponentCommon.registrarEnLog("Datos Construcciones: ...");		
		for(int construccion_i = 0; construccion_i < nroConstrucciones; construccion_i ++)
		{
			datosConstruccionesVU ( construccion_i, anioInicioImpuesto );
		}		
		try
		{
			if(conConstruccionAdicional)
			{
				construccionesAdicionales(nroConstruccionesAdicionales, anioInicioImpuesto);
			}
		}
		catch(NoSuchElementException noEncuentraConstruccionesAdicionalesExcepcion) { }
		finally
		{
			try
			{
				moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_ID);
			}
			catch(NoSuchElementException noEncuentraIdBotonAceptarException)
			{
				moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_NAME);
			}
		}		
		ComponentCommon.registrarEnLog("Datos Construcciones: OK.");		
		this.wait.until(ExpectedConditions.or(ExpectedConditions.visibilityOfElementLocated(By.xpath(Constants.PATH_TITULO_VISTA))));
	}	
	
	
	/**
	 * Método buscarContribuyente ( ): Realiza el flujo de la vista Asignar Constribuyente.
	 * ------------------------------------------------------------------------------------------------------------------------------------------------------------
	 * Ajustes para considerar scroll en el botón aceptar, cuando un PMC se encuentra asociado a mas de un contribuyente y para esperar hasta que el título de 
	 * la vista empiece con la palabra ASIGNAR.
	 */
	public void buscarContribuyente ( String pmc )
	{		
		final String ID_CAMPO_NUMERO_DOCUMENTO = "txtNumeroDocumento";
		final String ID_COMBO_TIPO_DOCUMENTO   = "cbxTipoDocumento";
		final String NOMBRE_BOTON_BUSCAR       = "btnBuscar";
		
		int                 enlace_i       = 0;
		List < WebElement > enlacesAsociar = null;						
		    
	    this.wait.until ( ExpectedConditions.visibilityOfElementLocated ( By.id ( ID_CAMPO_NUMERO_DOCUMENTO ) ) ).sendKeys ( pmc );
	    new Select ( this.driver.findElement ( By.id ( ID_COMBO_TIPO_DOCUMENTO ) ) ).selectByVisibleText ( ConstantsInmuebles.DOCUMENTO_PADRON_MUNICIPAL_CONTRIBUYENTE );
	    capturarPantalla ( );
	    this.driver.findElement ( By.name ( NOMBRE_BOTON_BUSCAR ) ).click ( );
	    
	    this.wait.until ( ExpectedConditions.or ( ExpectedConditions.visibilityOfElementLocated ( By.id ( Constants.ID_NAME_BOTON_ACEPTAR ) ), //14/09/2018 Inicio
	    		                                  ExpectedConditions.visibilityOfElementLocated ( By.linkText ( "Asociar" ) ),
	    		                                  ExpectedConditions.visibilityOfElementLocated ( By.xpath ( Constants.PATH_TITULO_VISTA ) ) ) );
	    
	    if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_LINK_TEXT, "Asociar" ) )
	    {	    	    	
	    	do
	    	{
	    		enlacesAsociar = this.driver.findElements ( By.linkText ( "Asociar" ) );	
	    		capturarPantalla ( );
	    		enlacesAsociar.get ( enlace_i ).click ( );
	    		
	    		this.wait.until ( ExpectedConditions.or ( ExpectedConditions.alertIsPresent ( ),
	    				                                  ExpectedConditions.visibilityOfElementLocated ( By.xpath ( Constants.PATH_VALIDACIONES ) ),
	    				                                  ExpectedConditions.visibilityOfElementLocated ( By.id ( Constants.ID_NAME_BOTON_ACEPTAR ) ) ) );
	    		
	    		if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, Constants.ID_NAME_BOTON_ACEPTAR ) )
	    		{
	    			break;
	    		}
	    		else
	    		{
	    			enlace_i ++;
	    			capturarPantalla ( );
	    			this.driver.findElement ( By.linkText ( "Anterior" ) ).click ( );
	    			this.wait.until ( ExpectedConditions.visibilityOfElementLocated ( By.linkText ( "Asociar" ) ) );
	    		}
	    	}while ( enlace_i < enlacesAsociar.size ( ) );  //14/09/2018 Fin
	    }
	    
	    if ( cuadroDialogoEstaPresente ( ) )
		{	
			this.mensajeError.append ( this.driver.switchTo ( ).alert ( ).getText ( ) );
			this.driver.switchTo ( ).alert ( ).accept ( );			
			throw new AssertionError ( this.mensajeError.toString ( ) );		
		}
		
		if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_XPATH, Constants.PATH_VALIDACIONES ) && 
			 getTituloVista ( ).equalsIgnoreCase( "VALIDACIONES" ) )
		{
			this.mensajeError.append ( this.driver.findElement ( By.xpath ( Constants.PATH_VALIDACIONES ) ).getText ( ) );
			throw new AssertionError ( this.mensajeError.toString ( ) );
		}
	}
	
	/**
	 * Método limitesColindancias(): Realiza el flujo de la vista Límites y Colindancias.
	 */
	public void limitesColindancias ( )
	{
		final String ID_CUADRO_VERIFICACION_LIMITE      = "chkLimite";
		final String ID_CUADRO_VERIFICACION_NO_CONSIGNA = "chkNoconsigna";
		final String ID_BOTON_ADICIONAR                 = "btnAdicionar";
		final String PATH_BLOQUE_LIMITES_COLINDANCIAS   = "/html/body/div[2]/form/table/tbody/tr[7]/td/div/h3";
		
		List < WebElement > limites = null; 
		
		if ( esperarVista ( "LIMITES Y COLINDANCIAS" ) )
		{
			ComponentCommon.registrarEnLog ( "Límites y Colindancias: ..." );
			
			if ( !elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_XPATH, PATH_BLOQUE_LIMITES_COLINDANCIAS ) )
			{
				limites = this.driver.findElements ( By.id ( ID_CUADRO_VERIFICACION_LIMITE ) );
				
				for ( WebElement limite_i: limites )
				{
					limite_i.click ( );		
				}
				
				this.driver.findElement ( By.id ( ID_CUADRO_VERIFICACION_NO_CONSIGNA ) ).click ( );	
				this.driver.findElement ( By.id ( ID_BOTON_ADICIONAR ) ).click ( );				
				this.wait.until ( ExpectedConditions.visibilityOfElementLocated ( By.linkText ( "Excluir" ) ) );				
			}
			
			capturarPantalla ( );
			moverScrollYAceptar ( Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_NAME );
			this.wait.until ( ExpectedConditions.or ( ExpectedConditions.alertIsPresent ( ),
					                                  ExpectedConditions.visibilityOfElementLocated ( By.xpath ( Constants.PATH_TITULO_VISTA ) ) ) );
			if ( cuadroDialogoEstaPresente ( ) )
			{
				this.driver.switchTo ( ).alert ( ).dismiss ( );
			}
			ComponentCommon.registrarEnLog ( "Límites y Colindancias: OK." );
		}
	}
	
	/**
     * Método moverScrollYAceptar(): Baja el Scroll de la pantalla y presiona aceptar.
     */   
     public void moverScrollYAceptar(String idNombreBoton, String tipoLocalizador)
     {
         switch (tipoLocalizador)
         {
         	case Constants.TIPO_LOCALIZADOR_ID:  
         		moverScroll(this.driver.findElement(By.id(idNombreBoton)));
                this.driver.findElement(By.id(idNombreBoton)).click();
            break;
         	case Constants.TIPO_LOCALIZADOR_NAME: 
         		moverScroll(this.driver.findElement(By.name(idNombreBoton)));
                this.driver.findElement(By.name(idNombreBoton)).click();;
            break;                          
         }       
     }
     
     public void moverScroll(WebElement elemento)
     {
    	 int posicionY;
    	 
    	 posicionY = elemento.getLocation().getY() - 20;        
         ((JavascriptExecutor) this.driver).executeScript("scroll(0, ".concat(String.valueOf(posicionY)).concat(")"));
     }
     
     /**
      * Función: getTiempoTranscurrido(): Dado un tiempo inicio, devuelve el tiempo transcurrido hasta el momento actual.
      * @param tiempoInicio
      * @return tiempoTranscurrido
      */
     public String getTiempoTranscurrido(long tiempoInicio)
     {
    	 return ComponentCommon.formatearTiempoEjecucion(System.currentTimeMillis() - tiempoInicio);
     }
     
     /**
      * Creado: efigueredo
      * Actividad: AP-059/2018 (ATINM-17)
      * Fecha: 19/10/2018
      * Función que devuelve el mensaje de código de error del aplicativo, y además, realiza conexión con Base de Datos y obtiene la
      * descripción del error, devolviendo todo en una cadena de texto.
      * @return errorAplicativo
      */
     public String procesarErrorAplicativo ( )
     {
    	 String codigoError      = "";
 		 String descripcionError = "";
 		
		 codigoError      = this.driver.findElement ( By.cssSelector ( Constants.SELECTOR_CSS_CODIGO_ERROR ) ).getText ( );		
		 codigoError      = codigoError.substring ( codigoError.indexOf ( ":" ) + 2, codigoError.indexOf ( "en la" ) - 1 );		
		 descripcionError = procesarErrorAplicativo ( codigoError );
		 
		 return descripcionError;
     }
     
     public String procesarErrorAplicativo ( String codigoError )
     {
 		 AccesoBaseDatos                            objBaseDatos     = new AccesoBaseDatos ( );
 		 StringBuilder                              descripcionError = new StringBuilder ( );
 		 Hashtable < String, ArrayList < String > > consultaError    = new Hashtable < String, ArrayList < String > > ( );
 		
    	 descripcionError.append ( "ERROR APLICATIVO:\n" ).append ( Constants.CADENA_ERROR_APLICATIVO )
    	                 .append ( "\n " ).append ( codigoError );
    	 
		 consultaError = objBaseDatos.getConsultaBD ( ConsultasSQL.getErrorInmuebles ( codigoError ) );
		 
		 descripcionError.append ( "\n Descripción Error:\n " ).append ( consultaError.get ( "DESCRIPCION" ).get ( 0 ) )
                         .append ( Constants.CADENA_ERROR_APLICATIVO );
		 
		 return descripcionError.toString ( );
     }
     
     /**
      * Método procesarFallo(): Registra en log y en consola el fallo ocurrido, reinicia la variable mensajeError y se vuelve al menú
      * principal.
      * @param falloFlujo
      */
     public void procesarFallo ( AssertionError falloFlujo )
     {
    	 ComponentCommon.registrarEnLog ( falloFlujo.getMessage ( ).replaceAll ( "\n", " " ) );
    	 
		 if ( cuadroDialogoEstaPresente ( ) )
		 {
			 this.driver.switchTo ( ).alert ( ).accept ( );
		 }
		 
		 this.mensajeError.delete ( 8, this.mensajeError.length ( ) );
     }
     
     public void registroDatosTecnicos(ArrayList<Double> superficies, String anioDatosAdicionales)
 	{
    	final String PATH_TITULOS_TABLAS           = "/html/body/div[2]/form/table/tbody/tr[2]/td/h3";
 		final String PATH_TABLA_DATOS_TECNICOS     = "//*[@id='frmRegistrar']/table/tbody/tr[2]/td/table";
 		final String ENLACE_DEFINICION_INMUEBLE    = "*Definición Inmueble";
 		final String ENLACE_DATOS_SUPERFICIE       = "*Datos Superficie";
 		final String ENLACE_DATOS_DERECHOS_REALES  = "*Datos Derechos Reales";
 		final String ENLACE_DATOS_CODIGO_CATASTRAL = "*Datos Código Catastral";
 		final String ENLACE_UBICACION_INMUEBLE     = "*Ubicación Inmueble";
 		
 		int              titulo_i                = 1;
 		int              fila_i                  = 1;
 		String           descripcion             = "";
 		String           pathDatosTecnicos       = "";
 		List<WebElement> titulosTablas           = null;
 		List<WebElement> filasTablaDatosTecnicos = null;	
 		
 		this.wait.until(ExpectedConditions.textToBe(By.xpath(Constants.PATH_TITULO_VISTA), ConstantsInmuebles.VISTA_REGISTRO_DATOS_TECNICOS));
 		ComponentCommon.registrarEnLog("Registro Datos Técnicos: ...");
 		titulosTablas = this.driver.findElements(By.xpath(PATH_TITULOS_TABLAS));
 		do
 		{
 			if(titulosTablas.get(titulo_i - 1).getText().equalsIgnoreCase("Registro Datos Técnicos Inmueble Fracción"))
 			{
 				break;
 			}
 			else
 			{
 				titulo_i ++;
 			}
 		}while(titulo_i < titulosTablas.size());
 		do
 		{
  			pathDatosTecnicos       = PATH_TABLA_DATOS_TECNICOS.concat("[").concat(String.valueOf(titulo_i)).concat("]/tbody/tr");
 			filasTablaDatosTecnicos = this.driver.findElements(By.xpath(pathDatosTecnicos)); 		
 			descripcion             = filasTablaDatosTecnicos.get(fila_i).findElement(By.xpath("td[2]")).getText();
 			filasTablaDatosTecnicos.get(fila_i).findElement(By.xpath("td[3]")).click();			
 			switch(descripcion)
 			{
 				case ENLACE_DEFINICION_INMUEBLE    : definicionInmueble();                   break;
 				case ENLACE_DATOS_SUPERFICIE       : datosSuperficie(superficies);           break;
 				case ENLACE_DATOS_DERECHOS_REALES  : datosAdicionales(anioDatosAdicionales); break;
 				case ENLACE_DATOS_CODIGO_CATASTRAL : datosCodigoCatastral("S/A");            break;
 				case ENLACE_UBICACION_INMUEBLE     : ubicacionInmueble();	                 break;
 			}
 			this.wait.until(ExpectedConditions.textToBe(By.xpath(Constants.PATH_TITULO_VISTA), ConstantsInmuebles.VISTA_REGISTRO_DATOS_TECNICOS));
 			fila_i ++;
 		}
 		while(fila_i < filasTablaDatosTecnicos.size());
 		moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_NAME);
 		ComponentCommon.registrarEnLog("Registro Datos Técnicos: OK.");
 	}
     
    public void definicionInmueble()
 	{
 		final String PATH_TABLA_DATOS_INMUEBLE = "//*[@id='frmInmueble']/table/tbody/tr";
 		final String PATH_CLASE_INMUEBLE       = "//*[@id='frmInmueble']/table/tbody/tr[2]/td/table[2]/tbody/tr[1]/td";
 		final String ID_COMBO_CLASE_INMUEBLE   = "{actionForm.clase}";
 		final String ID_CAMPO_GEOCODIGO        = "txtGeocodigo";
 		final String ID_CAMPO_CODIGO_CATASTRAL = "txtCodigocatastral";
 		final String MENSAJE_GEOCODIGO         = "geocódigo";
 		
 		String pathEtiquetaCodigoCatastral = "";
 		
 		this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.xpath(getPathTituloVista(ConstantsInmuebles.NOMBRE_FORM_DEFINICION_INMUEBLE))));
 		ComponentCommon.registrarEnLog(" Definición Inmueble: ...");
 		pathEtiquetaCodigoCatastral = PATH_TABLA_DATOS_INMUEBLE.concat("[").concat(String.valueOf(this.driver.findElements(By.xpath(PATH_TABLA_DATOS_INMUEBLE)).size() - 2)).concat("]/td/table/tbody/tr[1]/th");
 		if(this.driver.findElements(By.xpath(pathEtiquetaCodigoCatastral)).size() > 0 && this.driver.findElement(By.xpath(pathEtiquetaCodigoCatastral)).getText().startsWith("*"))
 		{
 			this.driver.findElement(By.id(ID_CAMPO_CODIGO_CATASTRAL)).sendKeys(generarCodigoCatastral("",""));
 		}

 		if(this.driver.findElement(By.xpath(PATH_CLASE_INMUEBLE)).getText().equals(ConstantsInmuebles.CLASE_VIVIENDA_UNIFAMILIAR))
 		{
 			if(this.driver.findElements(By.tagName(ConstantsInmuebles.ETIQUETA_COMBO)).size() > 0)
 			{
 				try
 				{
 					new Select(this.driver.findElement(By.id(ID_COMBO_CLASE_INMUEBLE))).selectByVisibleText(ConstantsInmuebles.CLASE_VIVIENDA_UNIFAMILIAR);
 				}
 				catch(UnexpectedTagNameException comboClaseNoEsComboExcepcion) { }
 			}
 		}
 		
 		if(this.driver.findElements(By.id(ID_CAMPO_GEOCODIGO)).size() > 0 && !this.driver.findElement(By.id(ID_CAMPO_GEOCODIGO)).getAttribute(ConstantsInmuebles.ATRIBUTO_CSS_CLASE).isEmpty())
 		{
 			do
 			{
 				this.driver.findElement(By.id(ID_CAMPO_GEOCODIGO)).clear();
 				this.driver.findElement(By.id(ID_CAMPO_GEOCODIGO)).sendKeys(generarGeocodigo(this.driver.findElement(By.xpath(PATH_CLASE_INMUEBLE)).getText().equals(ConstantsInmuebles.CLASE_PROPIEDAD_HORIZONTAL)? true: false));			
 				this.driver.findElement(By.id(Constants.ID_NAME_BOTON_ACEPTAR)).click();
 				
 				this.wait.until(ExpectedConditions.or(ExpectedConditions.alertIsPresent(),
 						                              ExpectedConditions.textToBe(By.xpath(Constants.PATH_TITULO_VISTA), ConstantsInmuebles.VISTA_REGISTRO_DATOS_TECNICOS)));			
 				if(cuadroDialogoEstaPresente() && this.driver.switchTo().alert().getText().contains(MENSAJE_GEOCODIGO))
 				{
 					this.driver.switchTo().alert().accept();
 				}
 				else
 				{
 					break;
 				}
 			}while(true);
 		}
 		else 
 		{ 
 			this.driver.findElement(By.name(Constants.ID_NAME_BOTON_ACEPTAR)).click();
 		}
 		ComponentCommon.registrarEnLog(" Definición Inmueble: OK.");
 	}
     
    public void datosSuperficie(ArrayList<Double> superficies)
 	{
 		final String VISTA_DATOS_SUPERFICIES           = "DATOS SUPERFICIES";
 		final String PATH_DATOS_SUPERFICIE             = "//*[@id='frmRegistrar']/table/tbody/tr[2]/td/";
 		final String PATH_TITULOS_TABLAS               = PATH_DATOS_SUPERFICIE.concat("h3");
 		final String PATH_ENLACE_FRACCIONAR_SUPERFICIE = "//*[@id='frmRegistrar']/table/tbody/tr[2]/td/table";
 		final String ID_CAMPO_SUPERFICIE               = "txtSuperficie";
 		final String PATH_ETIQUETA_TIPO_BLOQUE         = "//*[@id='ventana']/form/table/tbody/tr[6]/td/table/tbody/tr/td/span";
 		final String ID_CAMPO_BLOQUE                   = "txtBloque";
 		final String BLOQUE_NUMERICO                   = "1";
 		
 		int               indiceUltimaTabla     = 0;
 		String            pathSuperficie        = "";
 		boolean           soloUnaSuperficie     = true;
 		ArrayList<String> pathEnlaceSuperficies = null;
 		
 		this.wait.until(ExpectedConditions.textToBe(By.xpath(Constants.PATH_TITULO_VISTA), VISTA_DATOS_SUPERFICIES));
 		indiceUltimaTabla     = this.driver.findElements(By.xpath(PATH_TITULOS_TABLAS)).size();
 		pathEnlaceSuperficies = new ArrayList<String>();		
 		if(this.driver.findElement(By.xpath(PATH_TITULOS_TABLAS.concat("[").concat(String.valueOf(indiceUltimaTabla - 1)).concat("]"))).getText().contains("Inmueble Fracción"))
 		{
 			pathSuperficie    = PATH_ENLACE_FRACCIONAR_SUPERFICIE.concat("[").concat(String.valueOf(indiceUltimaTabla - 1)).concat("]/tbody/tr[2]/td");
 			soloUnaSuperficie = false;
 		}
 		else
 		{
 			pathSuperficie = PATH_ENLACE_FRACCIONAR_SUPERFICIE.concat("[").concat(String.valueOf(indiceUltimaTabla)).concat("]/tbody/tr[2]/td");
 		}		
 		
 		pathEnlaceSuperficies.add(pathSuperficie.concat("[").concat(String.valueOf(this.driver.findElements(By.xpath(pathSuperficie)).size())).concat("]/a"));
 		this.driver.findElement(By.xpath(pathEnlaceSuperficies.get(0))).click();
 		ComponentCommon.registrarEnLog(" Datos Superficie: ...");		
 		this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(ID_CAMPO_SUPERFICIE))).sendKeys(String.valueOf(superficies.get(0)));
 		
 		
 		
 		if(elementoWebEstaPresente(Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_BLOQUE))
		{
			if(this.driver.findElement(By.xpath(PATH_ETIQUETA_TIPO_BLOQUE)).getText().trim().equalsIgnoreCase("(Numérico)"))
			{
				if(this.driver.findElement(By.id(ID_CAMPO_BLOQUE)).getAttribute("value").equals("0") ||
				   this.driver.findElement(By.id(ID_CAMPO_BLOQUE)).getAttribute("value").isEmpty())
				{
					if(this.driver.findElement(By.id(ID_CAMPO_BLOQUE)).getAttribute("value").equals("0"))
					{
						ComponentCommon.registrarEnLog("   Bloque con valor 0, no válido. Se ingresará valor 1 como constante.");
					}					
					this.driver.findElement(By.id(ID_CAMPO_BLOQUE)).clear();
					this.driver.findElement(By.id(ID_CAMPO_BLOQUE)).sendKeys(BLOQUE_NUMERICO);
				}			
			}
		}
 		moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_NAME);		
 		this.wait.until(ExpectedConditions.textToBe(By.xpath(Constants.PATH_TITULO_VISTA), VISTA_DATOS_SUPERFICIES));
 		if(!soloUnaSuperficie)
 		{
 			pathSuperficie = PATH_ENLACE_FRACCIONAR_SUPERFICIE.concat("[").concat(String.valueOf(indiceUltimaTabla)).concat("]/tbody/tr[2]/td");
 			pathEnlaceSuperficies.add(pathSuperficie.concat("[").concat(String.valueOf(this.driver.findElements(By.xpath(pathSuperficie)).size())).concat("]/a"));
 			this.driver.findElement(By.xpath(pathEnlaceSuperficies.get(1))).click();			
 			this.wait.until(ExpectedConditions.visibilityOfElementLocated(By.id(ID_CAMPO_SUPERFICIE)));
 			if(elementoWebEstaPresente(Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_BLOQUE))
 			{
 				if(this.driver.findElement(By.xpath(PATH_ETIQUETA_TIPO_BLOQUE)).getText().trim().equalsIgnoreCase("(Numérico)"))
 				{
 					this.driver.findElement(By.id(ID_CAMPO_BLOQUE)).clear();
 					this.driver.findElement(By.id(ID_CAMPO_BLOQUE)).sendKeys(BLOQUE_NUMERICO);
 				}
 			}
 			this.driver.findElement(By.id(ID_CAMPO_SUPERFICIE)).sendKeys(String.valueOf(superficies.get(1)));
 			moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_NAME);
 		}	
 		this.wait.until(ExpectedConditions.elementToBeClickable(By.name(Constants.ID_NAME_BOTON_ACEPTAR)));
 		moverScrollYAceptar(Constants.ID_NAME_BOTON_ACEPTAR, Constants.TIPO_LOCALIZADOR_NAME);
 		ComponentCommon.registrarEnLog(" Datos Superficie: OK.");
 	}
    
    public void procesarPropiedades ( int accionInicio, int accionFin )
    {    	
    }
    
    public < E extends ComponentCommonInmuebles > void procesarAccionesDerechos ( )
	{
    	if ( getNumeroAccionesActivas ( ) > 0 )
    	{
    		if ( this.accionInicio.equals ( ConstantsInmuebles.OPCION_TODAS ) && this.accionFin.equals ( ConstantsInmuebles.OPCION_TODAS ) )
    		{ 
        		procesarPropiedades ( 1, getNumeroAccionesActivas ( ) );
    		}
    		else
    		{
    			if ( Integer.parseInt ( this.accionFin ) > getNumeroAccionesActivas ( ) )
    			{
    				this.accionFin = String.valueOf ( getNumeroAccionesActivas ( ) );
    			}
    			procesarPropiedades ( Integer.parseInt ( this.accionInicio ), Integer.parseInt ( this.accionFin ) );	//Intervalo de acciones.
    		}
    	}
    	else
    	{
    		this.mensajeError.append ( "No existen propiedades activas." );
    		throw new AssertionError ( this.mensajeError.toString ( ) );
    	}
	}
    
    public void seleccionarPropiedadHistorica()
    {
    	final String ENLACE_PARCIAL_VER_DETALLE = "Detalle";
    	final String ENLACE_SELECCIONAR         = "Seleccionar";
    	
    	this.driver.findElement(By.partialLinkText(ENLACE_PARCIAL_VER_DETALLE)).click();
    	this.wait.until(ExpectedConditions.elementToBeClickable(By.linkText(ENLACE_SELECCIONAR))).click();
    }
    
    /**
	 * Método datosCatastrales ( ): Realiza el flujo de la vista Datos Catastrales.
	 * ------------------------------------------------------------------------------------------------------------------------
	 * Ajustes para considerar el método esperarVista ( ).
	 * ------------------------------------------------------------------------------------------------------------------------
	 * Ajustes para considerar el método escribeValorMaximoEnCampoTexto ( ).
	 */
	public void datosCatastrales ( )
	{
		final String ID_CAMPO_LOTE = "txtLote";
		
		if ( esperarVista ( "DATOS CATASTRALES" ) )
		{
			ComponentCommon.registrarEnLog ( "Datos Catastrales: ..." );
			
			if ( elementoWebEstaPresente ( Constants.TIPO_LOCALIZADOR_ID, ID_CAMPO_LOTE ) )
			{
				escribeValorMaximoEnCampoTexto ( ID_CAMPO_LOTE );
			}
			
			capturarPantalla ( );		
			this.driver.findElement ( By.id ( Constants.ID_NAME_BOTON_ACEPTAR ) ).click ( );		
			ComponentCommon.registrarEnLog ( "Datos Catastrales: OK." );		
		}
	}
	
	/**
	 * Creado: efigueredo	Fecha: 31/072019
	 * Método detalleDeudas ( ): selecciona un intervalo de gestiones [gestionInicio  gestionFin] o deudas (IMT) según el caso, 
	 * del bloque de Deudas.
	 * @param pathFilasDeudas
	 * @param gestionInicio
	 * @param gestionFin
	 * @param esImt
	 */
	public void detalleDeudas ( String pathFilasDeudas, int gestionInicio, int gestionFin, boolean esImt )
	{
		int                 ultimaColumna      = 0;
		String              deuda              = "";
		String              detalleDeuda       = "";
		boolean             seleccionarDeuda   = false;
		WebElement          cuadroVerificacion = null;
		List < WebElement > deudasGestiones    = this.driver.findElements( By.xpath( pathFilasDeudas ) );
		
		for ( int fila_i = 1; fila_i < deudasGestiones.size( ); fila_i ++ )
		{
			deuda         = deudasGestiones.get ( fila_i ).findElement ( By.xpath ( "td[1]" ) ).getText ( );
			detalleDeuda  = deuda.concat ( " " ).concat(deudasGestiones.get ( fila_i ).findElement ( By.xpath ( "td[2]" ) ).getText ( ) );
			detalleDeuda  = detalleDeuda.replaceAll( "\n", " " );
			ultimaColumna = deudasGestiones.get ( fila_i ).findElements ( By.xpath ( "td" ) ).size ( );
			
			if ( ComponentCommon.esNumero ( deuda ) )
			{
				if ( Integer.parseInt ( deuda ) >=  gestionInicio && Integer.parseInt( deuda ) <= gestionFin )
				{
					seleccionarDeuda = true;					
				}
				else
				{
					seleccionarDeuda = false;
				}
			}
			else if ( deuda.contains( "IMT" ) && esImt )
			{
				seleccionarDeuda = true;
			}
			
			if ( seleccionarDeuda )
			{
				cuadroVerificacion = deudasGestiones.get ( fila_i ).findElement ( By.xpath ( "td[".concat ( String.valueOf ( ultimaColumna ) ).concat ( "]" ) ) ).findElement( By.tagName ( "input" ) );
				
				if ( cuadroVerificacionHabilitado ( cuadroVerificacion ) )
				{
					ComponentCommon.registrarEnLog ( " ".concat ( detalleDeuda ).concat( ": seleccionado." ) );
					cuadroVerificacion.click ( );
				}
				else
				{
					ComponentCommon.registrarEnLog( " ".concat(detalleDeuda).concat(": Deuda deshabilitada.") );
				}
			}
		}
	}
	
	public String obtieneDistritoSacaba ( String area )
	{
		int    numeroDistrito = 0;
		String distrito       = "";
		
		if ( area.equalsIgnoreCase ( ConstantsInmuebles.AREA_URBANO ) ) 
		{
			while ( true )
			{
				numeroDistrito = ComponentCommon.getNroAleatorio ( 1, 33 );
					
				if ( ( numeroDistrito >= 1 && numeroDistrito <= 22 ) || ( numeroDistrito >= 25 && numeroDistrito <= 33 ) )
				{
					distrito = String.valueOf ( numeroDistrito );
					break;
				}
			}
		}
		else
		{
			distrito = "54";
		}
		
		return distrito;
	}
	
	/**
	 * Método escribeValorMaximoEnCampoTexto ( ): Recibe el ID del campo de texto, obtiene la longitud máxima de caracteres que acepta y llena el campo de 
	 * texto con un número aleatorio con la cantidad de dígitos igual a la longitud máxima.
	 * @param idCampoTexto
	 * ------------------------------------------------------------------------------------------------------------------------------------------------------------                                    
	 */
	public void escribeValorMaximoEnCampoTexto ( String idCampoTexto )
	{
		int longitudMaxima = 0;
		
		longitudMaxima = Integer.parseInt ( this.driver.findElement ( By.id ( idCampoTexto ) ).getAttribute ( ConstantsInmuebles.ATRIBUTO_LONGITUD_MAXIMA ) );
		this.driver.findElement ( By.id ( idCampoTexto ) ).clear ( );
		this.driver.findElement ( By.id ( idCampoTexto ) ).sendKeys ( ComponentCommon.getNroAleatorio ( longitudMaxima ) );
	}
	
	/**
	 * Método seleccionarAleatorioEnCombo ( ): Dado un elemento web de tipo ComboBox, selecciona un valor de manera aleatoria, de elegirse un valor en blanco
	 * se selecciona otro valor hasta que sea distinto de vacío.
	 * @param combo
	 */
	public void seleccionarAleatorioEnCombo ( Select combo )
	{		
		int numeroOpciones = 0;
		
		numeroOpciones =  combo.getOptions ( ).size ( );	
		do
		{
			combo.selectByIndex ( ComponentCommon.getNroAleatorio ( 1, numeroOpciones - 1 ) );
			
		} while ( combo.getFirstSelectedOption ( ).getText ( ).isEmpty ( ) );
	}
	
	/**

	 * Función esCombo ( ): Devuelve true si el elemento web es un combo, en otro caso devuelve false.
	 * @param idCombo
	 * @return esCombo
	 */
	public boolean esCombo ( String idCombo )
	{
		String etiqueta = "";
		
		etiqueta = this.driver.findElement ( By.id ( idCombo ) ).getTagName ( );
		
		if ( etiqueta.equalsIgnoreCase ( ConstantsInmuebles.ETIQUETA_COMBO ) )
		{
			 return true;
		}
		else
		{
			return false;
		}
	}
}  
